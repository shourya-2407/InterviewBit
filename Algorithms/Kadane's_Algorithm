Java: 
class Solution {
    public int maxSubArray(int[] nums) {
        int max = Integer.MIN_VALUE;
        int sum = 0;

        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            max = Math.max(max, sum);

            if(sum < 0){
                sum = 0;
            }
        }
        return max;
    }
}


C++: 
#include<bits/stdc++.h>
using namespace std;

int maxSubArraySum(int a[], int n){
	int curr_sum = 0;
	int sum_so_far = INT_MIN;
	
	for(int i = 0; i < n; i++){
		curr_sum += a[i];
		if(sum_so_far < curr_sum)
			sum_so_far = curr_sum;
		if(curr_sum < 0)
			curr_sum = 0;
	}
	return sum_so_far;
}

int main()
{
    int a[] = {-2, -3, 4, -1, -2, 1, 5, -3};
    int n = sizeof(a)/sizeof(a[0]);
    int max_sum = maxSubArraySum(a, n);
    cout << "Maximum contiguous sum is " << max_sum;
    return 0;
}
