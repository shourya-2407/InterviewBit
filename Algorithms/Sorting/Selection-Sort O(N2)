// Logic: Select minimum and swap
// Time Complexity: n + n - 1 + n - 2 + ... + 2 + 1 = n*(n+1)/2 ~ n*n = n2 => O(N2)

class Solution
{
    void swap(int arr[], int i, int j){
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
    
	int  select(int arr[], int i)
	{
        // code here such that selectionSort() sorts arr[]
        int n = arr.length;
        int minInd = i;
        
        for(int j = i; j < n; j++){
            if(arr[j] < arr[minInd]){
                minInd = j;
            }
        }
        return minInd;
	}
	
	void selectionSort(int arr[], int n)
	{
	    //code here
	    for(int i = 0; i < n - 1; i++){
	        int minInd = select(arr, i);
	        swap(arr, i, minInd);
	    }
	}
}
