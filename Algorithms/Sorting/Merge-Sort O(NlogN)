// Logic: Divide and Merge
// 

class Solution
{
    void merge(int arr[], int l, int m, int r)
    {
        // Your code here
        int left = l;
        int right = m + 1;
        List<Integer> tmp = new ArrayList<>();
        
        while(left <= m && right <= r){
            if(arr[left] < arr[right]){
                tmp.add(arr[left]);
                left++;
            } else{
                tmp.add(arr[right]);
                right++;
            }
        }
        
        while(left <= m){
            tmp.add(arr[left]);
            left++;
        }
        
         while(right <= r){
            tmp.add(arr[right]);
            right++;
        } 
        
        for(int i = l; i <= r; i++){
            arr[i] = tmp.get(i - l); 
        }
    }
    
    void mergeSort(int arr[], int l, int r)
    {
        //code here
        if(l >= r){
            return;
        }
        
        int m = (l + r)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}
