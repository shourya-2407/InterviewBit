Approach: 
It works for majority element, which takes 2 traversals.
Time Complexity: O(N)
Space Complexity: O(1)

STEPS: 
	1. Find a candidate in majority 
	   - Initialize a variable say i ,votes = 0, candidate =-1 
	   - Traverse through the array using for loop
	   - If votes = 0, choose the candidate = arr[i] , make votes=1.
	   - else if the current element is the same as the candidate increment votes
	   - else decrement votes.
	
	2. Check if the candidate has more than N/2 votes
	   - Initialize a variable count =0 and increment count if it is the same as the candidate.
	   - If the count is >N/2, return the candidate.
	   - else return -1.

// C++ implementation for the above approach
#include<bits/stdc++.h>
using namespace std;

int find_majority(int arr[], int n){
	int ele = -1;
	int votes = 0;
	
	for(int i = 0; i < n; i++){
		if(votes == 0){
			ele = arr[i];
			votes = 1;
		}
		else{
			if(arr[i] == ele)
				votes++;
			else
				votes--;
				
		}
	}
	
	int cnt = 0;
	for(int i = 0; i < n; i++){
		if(arr[i] == ele)	
			cnt++;
	}
	if(cnt > n/2)
		return ele;
	else 
		return -1;
} 

int main(){
	int arr[5] = {3,3,1,4,3};
	cout << find_majority(arr, 5);
	return 0;
}

