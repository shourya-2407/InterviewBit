Given Problem: 
Given an array arr[] of size N and an integer K. Find the maximum for each and every contiguous subarray of size K.
N = 9, K = 3
arr[] = 1 2 3 1 4 5 2 3 6
Output: 
3 3 4 5 5 5 6 

Brute Force Solution: 
This can be done by finding all the possible subarrays using 2 for loops in O(N2).

Optimal Solution using Sliding Window: 
Consider a window of size k and you just need to slide the window across the array. 
That is once the maximum is found in first k elements, remove the first element from the window and add the (k+1)th element in window.
And then again calculate the maximum using the previous data.

Identification of Sliding Window problems:
- Given an array/string
- subarray/substring
- find maximum/minimum
- k = window size

Types of Sliding Windows:
- Fixed size window
  Find the size of the window required, say K.
  Compute the result for 1st window, i.e. include the first K elements of the data structure.
  Then use a loop to slide the window by 1 and keep computing the result window by window.

- Variable size window 
  In this type of sliding window problem, we increase our right pointer one by one till our condition is true.  
  At any step if our condition does not match, we shrink the size of our window by increasing left pointer.
  Again, when our condition satisfies, we start increasing the right pointer and follow step 1.
  We follow these steps until we reach to the end of the array.
