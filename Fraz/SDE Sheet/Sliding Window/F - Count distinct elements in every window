// Brute Force
class Solution
{
    ArrayList<Integer> countDistinct(int A[], int n, int k)
    {
        // code here 
        ArrayList<Integer> ans = new ArrayList<>();
        
        for(int i = 0; i <= n - k; i++){
            HashMap<Integer, Integer> _map = new HashMap<>();
            for(int j = i; j < i + k; j++){
                if(_map.containsKey(A[j])){
                    _map.put(A[j], _map.get(A[j]) + 1);
                } else{
                    _map.put(A[j], 1);
                }
            }
            ans.add(_map.size());
        }
        
        return ans;
    }
}

// Optimal
class Solution
{
    ArrayList<Integer> countDistinct(int A[], int n, int k)
    {
        // code here 
        ArrayList<Integer> ans = new ArrayList<>();
        HashMap<Integer, Integer> _map = new HashMap<>();
        
        for(int i = 0; i < k; i++){
            _map.put(A[i],_map.getOrDefault(A[i],0)+1);
        }
        ans.add(_map.size());
        
        for(int i = k; i < n; i++){
            if(_map.get(A[i - k]) == 1){
                _map.remove(A[i - k]);
            } else{
                _map.put(A[i - k], _map.get(A[i - k]) - 1);
            }
            _map.put(A[i],_map.getOrDefault(A[i],0)+1);
            ans.add(_map.size());
        }
        
        return ans;
    }
}

