// Brute Force - Recursion
class Solution {
    public int fib(int n) {
        if(n == 0) return 0;
        if(n == 1) return 1;

        return fib(n - 1) + fib(n - 2);
    }
}

// Memoisation using array
class Solution {
    public int fib(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        return solve(n, dp);
    }

    public int solve(int n, int[] dp){    
        if(n == 0) return 0;
        if(n == 1) return 1;

        if(dp[n] != -1) return dp[n];

        return dp[n] = solve(n - 1, dp) + solve(n - 2, dp);
    }
}

// Memoisation using 2 variables
class Solution {
    public int fib(int n) {
        if (n <= 1) return n;
        return solve(n, 0, 1);
    }

    public int solve(int n, int a, int b) {
        if (n == 1) return b;
        return solve(n - 1, b, a + b);
    }
}

// Tabulation using array
class Solution {
    public int fib(int n) {
        if(n <= 1) return n;
        
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;

        for(int i = 2; i <= n; i++){
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];
    }
}

// Tabulation using 2 variables
class Solution {
    public int fib(int n) {
        if(n <= 1) return n;

        int p1 = 1;
        int p2 = 0;

        for(int i = 2; i <= n; i++){
            int r = p1 + p2;
            p2 = p1;
            p1 = r;
        }

        return p1;
    }
}
