// Brute Force
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();
       
        ans.add(Arrays.asList(1));
        if(numRows == 1){
            return ans;
        }
      
        ans.add(Arrays.asList(1, 1));
        if(numRows == 2){
            return ans;
        }

        for(int i = 2; i < numRows; i++){
            List<Integer> row = new ArrayList<>(numRows);
            row.add(1);
            for(int j = 1; j < i; j++){
                int val = ans.get(i - 1).get(j) +  ans.get(i - 1).get(j - 1); 
                row.add(val);
            }
            row.add(1);
            ans.add(row);
        }

        return ans;
    }
}

// Optimal - observe pattern => the val at position (i, j) => iCj
class Solution {
    public int compute_nCr(int row, int col){
        int res = 1;
        for(int i = 0; i < col; i++){
            res = res * (row - i);
            res = res / (i + 1);
        }
        return res;
    }

    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> ans = new ArrayList<>();

        for(int i = 0; i < numRows; i++){
            List<Integer> row = new ArrayList<>();
            for(int j = 0; j <= i; j++){
                int val = compute_nCr(i, j);
                row.add(val);
            }
            ans.add(row);
        }

        return ans;
    }
}
