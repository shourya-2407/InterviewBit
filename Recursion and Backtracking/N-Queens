    bool isSafe(vector<string> board, int row, int col, int n){
        int duprow = row;
        int dupcol = col;

        while(row >= 0 && col >= 0){
            if(board[row][col] == 'Q') return false;
            row--;
            col--;
        }

        row = duprow;
        col = dupcol;
        while(col >= 0){
            if(board[row][col] == 'Q') return false;
            col--;
        }

        row = duprow;
        col = dupcol;
        while(row < n && col >= 0){
            if(board[row][col] == 'Q') return false;
            row++;
            col--;
        }
        return true;
    }

    void solve(vector<vector<string>>& result, vector<string>& board, int col, int n){
        if(col == n){
            result.push_back(board);
            return;
        }
        for(int i = 0; i < n; i++){
            if(isSafe(board, i, col, n)){ 
                board[i][col] = 'Q';
                solve(result, board, col + 1, n);
                board[i][col] = '.';
            }
        }

    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> result;
        vector<string> board(n);
        string s(n, '.');
        for(int i = 0; i < n; i++){
            board[i] = s;
        }
        solve(result, board, 0, n);
        return result;
    }
