// You can use a candidate only once 

void solve(vector<vector<int>>& result, vector<int>& candidates, vector<int>& subsequence, int index, int target){
    if(index == candidates.size()){
        if(target == 0)
            result.push_back(subsequence);
        return;
    }
    if(candidates[index] <= target){
        subsequence.push_back(candidates[index]);
        solve(result, candidates, subsequence, index, target - candidates[index]);
        subsequence.pop_back();
    }
    solve(result, candidates, subsequence, index + 1, target);
}

vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<int> subsequence;
    vector<vector<int>> result;
    solve(result,candidates, subsequence, 0, target);
    return result;
}
