    void solve(vector<vector<int>> &m, vector<string>& result, vector<vector<int>> &vis, int x, int y, string path, int n){
        if(x == n - 1 && y == n - 1){
            result.push_back(path);
            return;
        }
        
        if (m[x][y] == 0 or vis[x][y] == 1) return;
        
        vis[x][y] = 1;
        if (x > 0) solve(m, result, vis, x - 1, y, path + 'U', n);
        if (y > 0) solve(m, result, vis, x, y - 1, path + 'L', n);
        if (x < n - 1) solve(m, result, vis, x + 1, y, path + 'D', n);
        if (y < n - 1) solve(m, result, vis, x, y + 1, path + 'R', n);
        vis[x][y] = 0;       
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string> result;
        string path = "";
        vector<vector<int>> vis(n, vector<int>(n,0));
        
        if (m[0][0] == 0 || m[n - 1][n - 1] == 0) return result;
        
        solve(m, result, vis, 0, 0, path, n);
        
        sort(result.begin(), result.end());
        return result;
    }
