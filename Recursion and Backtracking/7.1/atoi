int solve(string str, int N){
  // if(index < 0) return 0;
  // return (10*solve(str, index - 1) + (str[index] - '0'));

  if (n < 0 || (S[n] < '0' || S[n] > '9')) {
      return 0;
  }

  // recur for remaining digits and append the current digit
  // to result of recursion multiplied by 10
  return (10 * atoi(S, n - 1) + (S[n] - '0'));


}
    
int atoi(string str) {
    //Your code here
    for(int i = 0; i < str.size(); i++) {
        if(str[i] <'0' || str[i] > '9') return -1;    
    }

    solve(str, str.size() - 1);
}
