// Better approach
public class Solution {
    public ArrayList<ArrayList<Integer>> solve(int A) {
        Integer[] one = {1};
        Integer[] two = {1, 1};
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        
        if (A == 0) {
            return result;
        }
        
        result.add(new ArrayList<>(Arrays.asList(one)));
        if (A == 1) {
            return result;
        }
        
        result.add(new ArrayList<>(Arrays.asList(two)));
        if (A == 2) {
            return result;
        }
        for (int i = 2; i < A; i++) {
            ArrayList<Integer> list = new ArrayList<Integer>();
            list.add(1);
            for (int j = 1; j < i; j++) {
                int val = result.get(i-1).get(j-1) + result.get(i-1).get(j);
                list.add(val);
            }
            list.add(1);
            result.add(list);
        }
        return result;
    }
}

// Using nCr 
public class Solution {
    public ArrayList<ArrayList<Integer>> solve(int A) {
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for(int i = 0; i < A; i++){
            ArrayList<Integer> row = getRow(i);
            ans.add(row);
        }
        
        return ans;
    }
    
    public ArrayList<Integer> getRow(int A) {
        ArrayList<Integer> row = new ArrayList<>();
        
        for(int i = 0; i <= A; i++){
            row.add(compute(i, A));    
        }
        
        return row;
    }
    
    private int compute(int r, int n) {
        if (r == 0 || n == r) return 1;

        long ans = 1;
        for (int i = 0; i < r; i++) {
            ans = ans * (n - i) / (i + 1);
        }

        return (int) ans;
    }
}
