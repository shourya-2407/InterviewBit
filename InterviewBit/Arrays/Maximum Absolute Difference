// Logic: Whenever u see modulo try with all possible values:
// Given the expression ∣A[i]−A[j]∣+∣i−j∣, we can break it down into:
1. A[i]−A[j]+i−j
2. A[i]−A[j]+j−i
3. A[j]−A[i]+i−j
4. A[j]−A[i]+j−i
Simplify:
1. (A[i]+i)−(A[j]+j)
2. (A[i]−i)−(A[j]−j)
3. (A[j]+j)−(A[i]+i)
4. (A[j]−j)−(A[i]−i)

// O(N) approach
public class Solution {
    public int maxArr(ArrayList<Integer> A) {
        int maxSums=A.get(0);
        int minSums=A.get(0);
        for(int i=0;i<A.size();i++)
        {
            maxSums=Math.max(maxSums,A.get(i)+i);
            minSums=Math.min(minSums,A.get(i)+i);
        }
        int sumsRes=maxSums-minSums;
        
        int maxDif=A.get(0);
        int minDif=A.get(0);
        for(int i=0;i<A.size();i++)
        {
            maxDif=Math.max(maxDif,A.get(i)-i);
            minDif=Math.min(minDif,A.get(i)-i);
        }
        int difsRes=maxDif-minDif;
        
        return Math.max(difsRes,sumsRes);
    }
}


// Brute force
public class Solution {
    public int maxArr(ArrayList<Integer> A) {
        int n = A.size();
        
        int maxVal = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                int currVal = Math.abs(A.get(i) - A.get(j)) + Math.abs(i - j);
                maxVal = Math.max(maxVal, currVal);
            }
        }
        
        return maxVal;
    }
}
