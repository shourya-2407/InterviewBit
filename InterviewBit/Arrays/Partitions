// Using extra space
// An array to store the last partitions
public class Solution {
    public int solve(int A, ArrayList<Integer> B) {
        int sum = 0;
        for(int num : B){
            sum += num;    
        }        
        if(sum % 3 != 0) return 0;
        
        int oneThirdSum = sum/3;
        
        int[] lastPartition = new int[A];
        Arrays.fill(lastPartition, 0);
        
        sum = 0;
        for(int i = A - 1; i >= 0; i--){
          sum += B.get(i);
          if(sum == oneThirdSum){
              lastPartition[i] = 1;
            }  
        }
        
        int totCnt = 0;
        sum = 0;    
        for(int i = 0; i < A; i++){
            sum += B.get(i);
            if(sum == oneThirdSum){
                for(int j = i + 2; j < A; j++){
                    if(lastPartition[j] == 1){
                        totCnt++;
                    }
                }
            }
        }    
        return totCnt;
    }
}

// Optimised 
// Logic: consider on the first partition, you get 2 subarrays with expected sum 
// And on the second partition you get 3 subarrays with expected sum
// Eg: [1, 2, 0, -1, 1, 3, 0, 0, 0, 3] 
// so for each time you find the second partition you need to add the times you found the first partition to the result.

public class Solution {
    public int solve(int A, ArrayList<Integer> B) {
        int sum = 0;
        int cnt = 0;
        int res = 0;
        
        for(int num : B){
            sum += num;
        }
        
        if(sum % 3 != 0) return 0;
        
        int oneThird = sum/3;
        int twoThird = 2*oneThird;
        sum = 0;
        
        for(int i = 0; i < A; i++){
            sum += B.get(i);
            
            if(sum == twoThird && i >= 1 && i <= A - 2){
                res += cnt;
            }
            if(sum == oneThird){
                cnt++;
            }    
        }
        
        return res;
    }
}
