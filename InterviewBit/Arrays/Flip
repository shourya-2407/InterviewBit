// optimal 
public class Solution {
    public ArrayList<Integer> flip(String A) {
        ArrayList<Integer> res = new ArrayList<>();
        boolean allOnes = true;  
        int start = 0;  
        int tempStart = 0;  
        int end = 0;  
        int cnt = 0;  
        int max = 0;  
        
        for (int i = 0; i < A.length(); i++) {
            if (A.charAt(i) == '0') {
                cnt++;  
                allOnes = false;  
            } else {
                cnt--;  
            }
            
            if (cnt < 0) {
                cnt = 0;
                tempStart = i + 1;
            }
            
            if (cnt > max) {
                max = cnt;
                start = tempStart;
                end = i;
            }
        }
        
        if (allOnes) return new ArrayList<>();  

        res.add(start + 1);  
        res.add(end + 1); 
        return res;
    }
}

// Using extra space
public class Solution {
    public ArrayList<Integer> flip(String A) {
        int n = A.length();
        int[] arr = new int[n];
        boolean flg = false;
        
        for(int i = 0; i < n; i++){
            if(A.charAt(i) == '0'){
                arr[i] = 1;
                flg = true;
            } else{
                arr[i] = -1;
            }
        }
        
        if(!flg) return new ArrayList<>();
        
        return maxSubArray(arr);
    }

    public ArrayList<Integer> maxSubArray(int[] nums) {
        int maxSum = nums[0];
        int currentSum = nums[0];
        int start = 0, end = 0, tempStart = 0;

        for (int i = 1; i < nums.length; i++) {
            if (currentSum + nums[i] < nums[i]) {
                currentSum = nums[i];
                tempStart = i;
            } else {
                currentSum += nums[i];
            }

            if (currentSum > maxSum) {
                maxSum = currentSum;
                start = tempStart;
                end = i;
            }
        }

        ArrayList<Integer> ans = new ArrayList<Integer>();
        ans.add(start + 1);
        ans.add(end + 1);
        return ans; // returns the start index, end index, and max sum
    }
}
