// Using 2 pointers O(N)
public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        int n = A.size();
        ArrayList<Integer> B = new ArrayList<>(n);
        int i = 0;
        int j = n - 1;
        int k = n - 1;
        
        for (int r = 0; r < n; r++) {
            B.add(0);
        }
        
        while(i <= j){
            if(Math.abs(A.get(i)) < Math.abs(A.get(j))){
                B.set(k, A.get(j)*A.get(j));
                j--;
            } else {
                B.set(k, A.get(i)*A.get(i));
                i++;
            }
            k--;
        }
        
        return B;
    }
}

// Brute force
public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        int n = A.size();
        ArrayList<Integer> B = new ArrayList<>(n);
        int i = 0;
        int j = n - 1;
        int k = n - 1;
        
        for (int r = 0; r < n; r++) {
            B.add(0);
        }
        
        while(i <= j){
            if(Math.abs(A.get(i)) < Math.abs(A.get(j))){
                B.set(k, A.get(j)*A.get(j));
                j--;
            } else {
                B.set(k, A.get(i)*A.get(i));
                i++;
            }
            k--;
        }
        
        return B;
    }
}
