// Optimal Solution without mistakes
public class Solution {
    public ArrayList<Integer> subUnsort(ArrayList<Integer> A) {
        int N = A.size();
        int i = 0, j = N - 1;

        while (i < N - 1 && A.get(i) <= A.get(i + 1)) {
            i++;
        }

        if (i == N - 1) {
            return new ArrayList<>(Collections.singletonList(-1));
        }

        while (j > 0 && A.get(j) >= A.get(j - 1)) {
            j--;
        }

        int minUnSort = A.get(i);
        int maxUnSort = A.get(i);

        for (int k = i; k <= j; k++) {
            if (A.get(k) < minUnSort) {
                minUnSort = A.get(k);
            }
            if (A.get(k) > maxUnSort) {
                maxUnSort = A.get(k);
            }
        }

        while (i > 0 && A.get(i - 1) > minUnSort) {
            i--;
        }

        while (j < N - 1 && A.get(j + 1) < maxUnSort) {
            j++;
        }

        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(i);
        ans.add(j);
        return ans;
    }
}

// optimal approach with mistakes
// just don't stick to the hints provided and straight forward implement it
// Use your head, try to think more
// there is no need for updating minUnSort and maxUnSort as they'll not change by adding values less than and greater than them
// simply don't use your trivial coding practices.
public class Solution {
    public ArrayList<Integer> subUnsort(ArrayList<Integer> A) {
        ArrayList<Integer> ans = new ArrayList<>();
        int N = A.size();
        int i = 0; 
        
        while(i < N - 1){
            if(A.get(i) > A.get(i + 1)){
                break;
            }
            i++;
        }
        
        if(i == N - 1){
            return new ArrayList<>(Collections.singletonList(-1));
        }
        
        int l = i, r = i;
        
        int minUnSort = A.get(l);
        int maxUnSort = A.get(r);
        
        for(int j = l; j <= r; j++){
           minUnSort = Math.min(minUnSort, A.get(j)); 
           maxUnSort = Math.max(maxUnSort, A.get(j));
        }
        
        while(A.get(l - 1) > minUnSort && l > 0){
            l--;
            minUnSort = Math.min(A.get(l), minUnSort);
            // why are you updating minUnSort if you are adding a value greater than it to the range??!!
        }
        while(A.get(r + 1) < maxUnSort && r < N - 1){
            r++;
            maxUnSort = Math.max(A.get(r), maxUnSort);
            // why are you updating maxUnSort if you are adding a value lesser than it to the range??!!
        } 

        ans.add(l);
        ans.add(r);
        return ans;
    }
}

// Brute force 
public class Solution {
    public ArrayList<Integer> subUnsort(ArrayList<Integer> A) {
        ArrayList<Integer> ans = new ArrayList<>();
        ArrayList<Integer> B = new ArrayList<>();
        for(int num : A){
            B.add(num);
        }
        
        Collections.sort(B);
        
        int N = A.size();
        int i = 0; 
        int j = N - 1;
        
        while(i < N){
            if(A.get(i) != B.get(i)){
                ans.add(i);
                break;
            }
            i++;
        }
        
        while(j > -1){
            if(A.get(j) != B.get(j)){
                ans.add(j);
                break;
            }
            j--;
        }
        
        if(ans.size() == 0){
            ans.add(-1);
        }
        
        return ans;
    }
}

