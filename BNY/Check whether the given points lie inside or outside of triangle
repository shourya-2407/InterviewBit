// Note: 
// Area of Triangle: abs((A.x * (B.y - C.y) + B.x * (C.y - A.y) + C.x * (A.y - B.y)) / 2.0)


#include <iostream>
using namespace std;

struct Point {
    int x;
    int y;
};

// Function to calculate the area of a triangle
double area(Point A, Point B, Point C) {
    return abs((A.x * (B.y - C.y) + B.x * (C.y - A.y) + C.x * (A.y - B.y)) / 2.0);
}

// Function to check if point P lies inside the triangle ABC
bool isInside(Point A, Point B, Point C, Point P) {
    double totalArea = area(A, B, C);
    double area1 = area(P, B, C);
    double area2 = area(A, P, C);
    double area3 = area(A, B, P);
    return (totalArea == area1 + area2 + area3);
}

int main() {
    Point A, B, C, P, Q;
    cout << "Enter coordinates of triangle vertices (A, B, C): ";
    cin >> A.x >> A.y >> B.x >> B.y >> C.x >> C.y;
    cout << "Enter coordinates of point P: ";
    cin >> P.x >> P.y;
    cout << "Enter coordinates of point Q: ";
    cin >> Q.x >> Q.y;

    // Check if P and Q are both inside, outside, or on the triangle
    bool isPInside = isInside(A, B, C, P);
    bool isQInside = isInside(A, B, C, Q);
    if (isPInside && isQInside) {
        cout << "1" << endl; // Both P and Q are inside the triangle
    }
    else if (!isPInside && !isQInside) {
        cout << "2" << endl; // Both P and Q are outside the triangle
    }
    else if (isPInside && !isQInside || !isPInside && isQInside) {
        cout << "3" << endl; // P is inside and Q is outside the triangle, or vice versa
    }
    else {
        cout << "4" << endl; // P and Q are on different sides of the triangle
    }

    return 0;
}
