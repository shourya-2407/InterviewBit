* Spring Framework Introduction:
1. An application framework and IOC (Inversion of Control) container for the Java platform.
2. Robust
3. POJO Based
4. Open source
5. Modular Approach: Even if there are a lot of packages and classes, you only need to worry about the ones you need and ignore the rest.
6. Integration with existing frameworks such as Hibernate, Tapestry, EJB, JSF, Struts, etc.
7. Web MVC
8. Central Exception Handling: provides a handy API for converting technology-specific exceptions 
(such as those raised by JDBC, Hibernate, or JDO) into consistent, unchecked exceptions.
9. Light weight: IoC containers are typically lightweight, especially when compared to EJB containers,
10. contains several modules like IOC, AOP, DAO, Context, WEB MVC, etc.

* POJO
Plain Old Java Object (POJO) 
-> a database entity is represented by POJO.
-> POJO has the same members as the database entity.
-> POJO are not tied to any framework, any java program can use it
-> An ordinary Java object, not bound by any special restriction other than those forced by the Java Language Specification 
Properties of POJO: 
- Cannot extend prespecified classes
- Cannot implement prespecified interfaces
- Cannot contain prespecified annotations
- No restriction on access-modifiers of fields
- Not necessary to include any constructor in it
- POJO is an object which encapsulates Business Logic

* Java Beans
Java Beans => POJO with some restrictions.  
              1. They should implement serializable
              2. Fields should be private
              3. Getter setter and a no-arg consrtuctor should be present, fields should be accessed through these only.

The POJO classes are similar to Beans as both are used to define the objects to increase the readability and re-usability.
All JavaBeans are POJOs but not all POJOs are JavaBeans.

* Spring Features:
1. IoC container: is the core of Spring Framework. 
It creates the objects, configures and assembles their dependencies, manages their entire life cycle. 
Uses DI to manage the components that make up the application.

2. Data access framework: provides persistence APIs like JDBC and Hibernate to store persistence data in DB.
Helps developer in managing DB connection, exceptions, and accessing persistent data through application.

3. Spring MVC framework: 
Web Browser -> Front controller --(model)--> Controller --(model)--> View -> Web Browser
Model: data of appplication. object or collection of object.
Controller: contains business logic of application. marked by @Controller.
View: represents provided info in a particular format. JSP+JSTL used to create view page.
Front Controller:  In Spring Web MVC, the DispatcherServlet class works as the front controller. 
Responsible to manage the flow of the Spring MVC application.


As displayed in the figure, all the incoming request is intercepted by the DispatcherServlet that works as the front controller.
The DispatcherServlet gets an entry of handler mapping from the XML file and forwards the request to the controller.
The controller returns an object of ModelAndView.
The DispatcherServlet checks the entry of view resolver in the XML file and invokes the specified view component.

4. Transaction management: 
5. Spring Web Service: 
6. JDBC abstraction layer: 
7. Spring TestContext framework: 

* Spring Framework Architecture:
1. Spring Core Module: 
2. Spring AOP Module: 
3. Spring ORM Module: 
4. Spring Web MVC Module: 
5. Spring Web Flow Module: 
6. Spring Web DAO Module: 
7. Spring Application Context Module: 

* Core Container, Data Access/Integration, Web, and Miscellaneous

* Difference Between Spring DAO vs Spring ORM vs Spring JDBC

* Spring vs. Struts in Java
