* Inversion of Control
- Spring IoC (Inversion of Control) Container is the core of Spring Framework. 
- Creates the objects, configures and assembles their dependencies, manages their entire life cycle. 
- The Container uses Dependency Injection(DI) to manage the components that make up the application.
- It gets the information about the objects from a configuration file(XML) or Java Code or Java Annotations and Java POJO class. 
- Inversion Of Control ==> controlling of Java objects and their lifecycle is not done by the developers.
- BeanFactory and ApplicationContext represent the Spring IoC Containers. 

Implementation of IOC:

//Using runtime polymorphism
public class Mobile {
	public static void main(String[] args)
	{
		 Sim sim = new Jio();
		 sim.calling();
		 sim.data();
	}
}

But what will you do if new Sim Vodafone came and we need to change? ==> this is where IOC comes into picture.
Using ApplicationContext to implement an IoC container. Create an XML file and name the file as “beans.xml“.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	https://www.springframework.org/schema/beans/spring-beans.xsd">
<bean id="sim" class="Jio"></bean>
</beans>

This is how we can make the code configurable. You have to change only inside the beans.xml file.

* Bean Factory (org.springframework.beans)
 - BeanFactory interface is the simplest container providing an advanced configuration mechanism to instantiate, configure, and manage the life cycle of beans.
 - Beans are Java objects that are configured at run-time by Spring IoC Container. 
 - BeanFactory uses Beans and their dependencies metadata to create and configure them at run-time.

Implementation to configure Bean factory:
1. Create a POJO class.
2. Configure the bean in the bean-factory-demo.xml file.
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="student" class="com.gfg.demo.domain.Student">
        <constructor-arg name="name" value="Tina"/>
        <constructor-arg name="age" value="21"/>
    </bean>
</beans>
3. write the main class file.
@SpringBootApplication
public class DemoApplication 
{
  public static void main(String[] args) 
  {
    BeanFactory factory = new ClassPathXmlApplicationContext("bean-factory-demo.xml");
    Student student = (Student) factory.getBean("student");
    System.out.println(student);
  }
}

The program flow is something like this:
1. The Bean factory reads the XML configuration file and as per the specifications defined in it, it creates the bean of the POJO.
2. Bean reference asks for the Bean object from the object factory.
3. Spring object factory hands over the bean to its reference. 
Here, note that the bean returned by the object factory is of “Object” type, so we have to typecast it into our desired bean.

* Application context (org.springframework.context)
ApplicationContext is the sub-interface of BeanFactory.
Provides additional enterprise-specific functionalities:


* Dependency Injection
- Dependency Injection is the main functionality provided by Spring IOC.
- Responsible for injecting dependencies through either Constructor or Setter methods.
- IOC emphasizes keeping the Java classes independent of each other and the container frees them from object creation and maintenance.
- Dependency Injection in Spring also ensures loose coupling between the classes
- Spring IoC is achieved through Dependency Injection.
- 2 types of Spring DI:
  a. Setter DI:
    public class GFG {
    	IGeek geek;
	public void setGeek(IGeek geek)
	{
	   this.geek = geek;
	}
    }
  b. Constructor DI:
    public class GFG {
    	IGeek geek;
	GFG(IGeek geek)
    	{
        	this.geek = geek;
    	}	
    }


* Singleton and Prototype Bean Scopes in Java Spring: 
Bean Scopes: refers to the lifecycle of Bean, it controls the instance creation of the bean and it is managed by the spring container.
~ 5 scopes of beans:
a. Singleton: Only one instance will be created for a single bean definition per Spring IoC container 
   and the same object will be shared for each request made for that bean.
   By default, the scope of a bean is a singleton.
b. Prototype: A new instance will be created for a single bean definition every time a request is made for that bean.
c. Request: A new instance will be created for a single bean definition every time an HTTP request is made for that bean. But Only valid in the context of a web-aware Spring ApplicationContext.
d. Session: Scopes a single bean definition to the lifecycle of an HTTP Session. But Only valid in the context of a web-aware Spring ApplicationContext.
e. Global-Session: Scopes a single bean definition to the lifecycle of a global HTTP Session. It is also only valid in the context of a web-aware Spring ApplicationContext.
