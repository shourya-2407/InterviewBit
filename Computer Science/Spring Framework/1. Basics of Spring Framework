* Spring Framework Introduction:
1. Open-source, builds robust java applications(developed over years), lightweight, and easy to use framework.
2. Light weight: IoC containers are typically lightweight, especially when compared to EJB containers.
   It is lightweight as we can inject dependencies as per our need without having to include each of them.
3. Framework of frameworks (Integration with existing frameworks such as Hibernate, Tapestry, EJB, JSF, Struts, etc.)
4. An application framework that provides features like IOC(Inversion of Control) container and DI(Dependency Injection) for the Java platform.
5. Modular Approach: Even if there are a lot of packages and classes, you only need to worry about the ones you need and ignore the rest.
   Eg: contains several modules like IOC, AOP, DAO, Context, WEB MVC, etc.
6. Central Exception Handling: provides a handy API for converting technology-specific exceptions 
(such as those raised by JDBC, Hibernate, or JDO) into consistent, unchecked exceptions.

* POJO
Plain Old Java Object (POJO) 
-> a database entity is represented by POJO.
-> POJO has the same members as the database entity.
-> POJO are not tied to any framework, any java program can use it
-> An ordinary Java object, not bound by any special restriction other than those forced by the Java Language Specification 
Properties of POJO: 
- Cannot extend prespecified classes
- Cannot implement prespecified interfaces
- Cannot contain prespecified annotations
- No restriction on access-modifiers of fields
- Not necessary to include any constructor in it
- POJO is an object which encapsulates Business Logic

* Java Beans
Java Beans => POJO with some restrictions.  
              1. They should implement serializable
              2. Fields should be private
              3. Getter setter and a no-arg consrtuctor should be present, fields should be accessed through these only.

The POJO classes are similar to Beans as both are used to define the objects to increase the readability and re-usability.
All JavaBeans are POJOs but not all POJOs are JavaBeans.

* Spring Features:
1. IoC container: is the core of Spring Framework. 
   It creates the objects, configures and assembles their dependencies, manages their entire life cycle. 
   Uses DI to manage the components that make up the application.
2. Data access framework: provides persistence APIs like JDBC and Hibernate to store persistence data in DB.
   Helps developer in managing DB connection, exceptions, and accessing persistent data through application.

3. Spring MVC framework: 
   Web Browser -> Front controller --(model)--> Controller --(model)--> View -> Web Browser
   Model: data of appplication. object or collection of object.
   Controller: contains business logic of application. marked by @Controller.
   View: represents provided info in a particular format. JSP+JSTL used to create view page.
   Front Controller:  In Spring Web MVC, the DispatcherServlet class works as the front controller. 
   Responsible to manage the flow of the Spring MVC application.

         Request (0)
           |
           v
     Dispatcher Servlet (1)
       |               ^  \
       v               |   \
    Handler Mapping(2) |  ViewResolver (5)
       |               |     |
       v               |     v
    Controller(3)      |    View (6)
       |               |
       v               |
    ModelAndView (4)----

   As displayed in the figure, all the incoming request is intercepted by the DispatcherServlet that works as the front controller.
   The DispatcherServlet gets an entry of handler mapping from the XML file and forwards the request to the controller.
   The controller returns an object of ModelAndView.
   The DispatcherServlet checks the entry of view resolver in the XML file and invokes the specified view component.
4. Transaction management: Helps in handling transaction management of an application without affecting its code.
5. Spring Web Service: Spring Web Service provides layered-based approaches that are separately managed by XML parsing.
6. JDBC abstraction layer: Helps the users in handling errors. All SQLExceptions are translated into the DataAccessException class.
7. Spring TestContext framework: Provides facilities of unit and integration testing for the Spring applications.

* Spring Framework Architecture:
1. Spring Core Module: provides the IoC container.
   There are two types of implementations of the Spring container: Bean factory and Application context.
2. Spring AOP Module: AOP breaks down the programs into aspects or concerns. Regular classes annotated with @Aspect annotation.
   These aspects help in transaction management and logging and failure monitoring of an application.
3. Spring ORM Module: used for accessing data from databases in an application. Provides APIs for manipulating databases.
4. Spring Web MVC Module: implements the MVC architecture for creating Web applications. 
5. Spring Web Flow Module: an extension of the Spring Web MVC module. 
   Helps in defining XML file or Java Class that manages the workflow between different pages of a Web application.
6. Spring Web DAO Module: provides DAO support by using data access technologies such as JDBC, Hibernate, or JDO.
   Multiple implementations are available for each data access technology supported by the Spring framework.
7. Spring Application Context Module: implements MessageSource interface and provides the messaging functionality to an application.

* Core Container, Data Access/Integration, Web, and Miscellaneous

* Spring Initializr: 
  - a Web-based tool that provides simple web UI to generate the Spring Boot project structure 
    or we can say it builds the skeleton of the Spring-based application.
  - Helps to select the necessary configuration for their projects which helps you to customize and configure the project requirement 
    and automatically manage the Spring Boot Dependencies using the Maven repository or Gradle. 

* Difference Between Spring DAO vs Spring ORM vs Spring JDBC
1. Spring-DAO: is not a spring module. It does not provide interfaces or templates to access the data.
   Annotate them with @Repository so that exceptions linked to the underlying technology (JDBC, Hibernate, JPA, etc.) 
   are consistently translated into the proper DataAccessException subclass.
2. Spring ORM: Spring-ORM is an umbrella module that covers many persistence technologies, namely JPA, JDO, Hibernate and iBatis. 
   For every individual technology, integration classes are provided by Spring.
   For each technology, the configuration basically consists in injecting a DataSource bean into some kind of SessionFactory or EntityManagerFactory etc. bean. 
   For pure JDBC, there's no need for such integration classes (apart from JdbcTemplate), as JDBC only relies on a DataSource.
3. Spring JDBC: Spring-JDBC provides the JdbcTemplate class, that removes plumbing code and helps you concentrate on the SQL query and parameters. 
   You just need to configure it with a DataSource. 
