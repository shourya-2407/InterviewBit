1. Issues with traditional file based system:
- absence of indexing, super slow, redundancy, inconsistency, unorganised data.

2. Advantages of DBMS:
- Data sharing, integrity(accuracy, consistency) constraints ensures organised and refined data, controlling redundancy, 
  provides backup and recovery failure, data security(authentication and encryption), 
  independence of data(can change structure of data without changing structure of application program).

3. Different languages of DBMS:
a. Data Definition Language (DDL): commands that define DB. E.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc. 
b. Data Modification Language (DML): manipulate the data present in the database. E.g., SELECT, UPDATE, INSERT, DELETE, etc.
c. Data Control Language (DCL): deal with the user permissions and controls of the DB. E.g., GRANT and REVOKE.
d. Transaction Control Language (TCL): deal with the transaction of the database. E.g., COMMIT(permanently save changes), ROLLBACK, and SAVEPOINT.
(SAVEPOINT -> a point from which you can roll back a transaction to a certain point without rolling back the entire transaction)

4. ACID properties:
A database transaction having these properties is known as ACID transaction:
a. Atomicity: All the changes to data must be performed successfully or not at all.
b. Consistency: Data must be consistent before and after a transaction.
c. Isolation: No other process can change the data while the transaction is running.
d. Durability: The changes made by a transaction must persist. Data is not lost in cases of a system failure or restart.

5. What is meant by an entity-relationship (E-R) model? Explain the terms Entity, Entity Type, and Entity Set in DBMS.
- An Entity-Relationship model is a diagrammatic approach to design DB, where real world objects are represented as entities 
  and relationships between them are mentioned.
- Entity: is a real-world object that can be uniquely identified by its attributes.
  An entity can be of two types :
  Tangible Entity : that exist in the real world physically. Example: Person, car, etc.
  Intangible Entity : that exist only logically and have no physical existence. Example: Bank Account, etc.
- Entity Type: Collection of entities that have the same attributes. 1 or more related tables in a database represent an entity type.
- Entity Set: Set of all the entities present in a specific entity type in a database.
Eg: A table Student has records of Ram, Sham and Kisam with attributes name, class, marks.
    So collection of entities Ram(E1) and Sham(E2) of the entity type Student forms an Entity Set.
Entities -> Rectangle
Relation -> Diamond
Attributes -> Oval

6. What is Normalization and Denormalization? 
* Normalization: Technique to minimize the redundancy and anomalies by organizing the data into multiple tables. 
- Removes row level duplicacy, by introducing unique key constraint.
- Column level duplicacy can lead to insertion anomaly, deletion anomaly and updation anomaly.
Observe below table.

SID	 Sname	 Cid	 Cname	 FID	  Fname	Salary
1	    RAM	    C1	  DBMS	  F1	  John	30000
2	    Ravi	  C2	  JAVA	  F2	  Bob	  40000
3	    Nitin	  C1	  DBMS	  F1	  John	30000
4	    Amrit	  C1	  DBMS	  F1	  John	30000

Insertion anomaly: Consider inserting a new course for which no student has enrolled, this cannot be done as SID has to be non-null.
Deletion anomaly: Consider deleting SID 2 info, which will ultimately delete all the info of course C2.
Updation anomaly: Consider updating salary of F1 faculty, you'll need to update 3 records which is unnecessary. 
- So normalization means dividing the above table into 3 different tables, Student, Course and Faculty.
- Normalization is putting data in multiple tables to avoid redundancy.

Denormalization: combines data and organizes into a single table.
JOIN operation allows us to create a denormalized form of the data by reversing the normalization. 
Benefits: 
1. Faster data read operations.
2. High data availability.
3. Data is fetched from single location.
Challenges: 
1. Redundant data.
2. Wastage of memory.
3. Data inconsistency.

7. Explain different types of Normalization forms in a DBMS.

8. Explain different types of relationships amongst tables in a DBMS.
  1. One to One Relationship
  2. One to Many Relationship
  3. Many to Many Relationship
  4. Self Referencing Relationship 

9. Explain different levels of data abstraction in a DBMS.
    
10. What is Data Warehousing?
  
11. Explain the difference between a 2-tier and 3-tier architecture in a DBMS.

12. Explain different types of keys in a database. 
-> mainly 7 types of keys
* Candidate Key
* Super Key
* Primary Key 
* Unique Key
* Alternate Key
* Foreign Key
* Composite Key



13.

14. Explain the difference between intension and extension in a database.

15. What are super, primary, candidate, and foreign keys? 
EmpID	   Email	              Phone        SSN        Name
101	  alice@example.com	    1234567890	123-45-6789	  Alice
102  	bob@example.com	      9876543210	987-65-4321	  Bob
103	  charlie@example.com	  5556667777	555-66-7777	  Charlie

Super Key: A set of one or more columns that can uniquely identify a row in a table (Eg: {EmpID}, {Email}, {Phone}, {SSN}, {EmpID, Email}, etc)
Candidate Key: Minimal Super Key that uniquely identifies a row (Eg: {EmpID}, {Email}, {Phone}, {SSN})
Primary Key: The most important candidate key with non null constraint.
Foreign Key: A primary key of some other table.

16. What is the difference between having and where clause? 
- WHERE clause cannot be used with aggregate functions(MIN(), MAX(), AVG(), SUM(), COUNT()), but the HAVING clause can.
- we use WHERE prior to GROUP BY and HAVING after GROUP BY. 
- Eg:
  SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
  FROM Orders
  INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
  WHERE LastName = 'Davolio' OR LastName = 'Fuller'
  GROUP BY LastName
  HAVING COUNT(Orders.OrderID) > 25;

17. What is the difference between a database schema and a database state?
State: The collection of information stored in a database at a particular instance.
Schema: The overall design of the database.

18. What is Identity? 
Identity/GUID(globally unique identifier) -> automatically generates numeric values.
A start and increment value can be set for Identity.
Value of GUID cannot be controlled.
These do not need to be indexed. 

19. What is a view in SQL? How to create a view?
- A view is a virtual table based on the result-set of an SQL statement. We can create it using CREATE VIEW syntax. 
- Views can represent a subset of the data contained in a table.
- a view can limit the degree of exposure of the underlying tables
Eg: 
CREATE VIEW view_name AS
SELECT column_name(s)
FROM table_name
WHERE condition

20. What is a Trigger? 
A Trigger is a code associated with insert, update or delete operations. 
The code is executed automatically whenever the associated query is executed on a table.

21. What is indexing?
- technique used to optimize the speed and efficiency of data retrieval operations.
- Implemented using B-tree or hash table data structures that stores sorted column values with pointers to the corresponding rows.
- Primary Index: Automatically created for a primary key column.
- Secondary Index: Additional indexes can be created on other columns to optimize specific queries.
- Trade-Off: While indexes improve read performance, they can slow down write operations (like INSERT, UPDATE, and DELETE) 
  because the index itself needs to be updated.

22. What are clustered and non-clustered Indexes? 

23. What is CLAUSE in SQL?

24. What is a Live Lock?

25. What is QBE? 

26. Why are cursors necessary in embedded SQL? 

27. 

28. 
