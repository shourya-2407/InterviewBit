* Java Basics

~ Variables in Java
- 3 types of variables - Static(1 for all objects of that class), Instance, Local
- Marking a variable public static ==> Global variable.
- Marking a variable public staic final => Global constant.
- Valid variable in java -> alphanumeric and underscore and dollar.
- No object variable --> It is object reference variable.
- Person myPerson = new Person()
    a. allocate space for the reference variable and name it as myPerson
    b. allocate space for the object on heap
    c. assign the object to the myPerson variable.
- All the object reference variable are of the same size, but the size varies according to the JVM.
- Instance variables get default values when not initialised.
  integers=0, float=0.0, boolean=false, reference=null
- Instance variables = defined at class level, get assigned with default values.
  Local variables = defined inside the method, cannot use uninitialised local variables.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Java OOPs concept

* Encapsulation: 
- combining data members and methods together in form of class.
- It hides implementation details from outside access while exposing a public interface.
- Instance variables are declared private and accessed through public getters and setters.
- Ensures internal state consistency and data security.
- It enhances reusability and ease of testing by isolating changes.

* Inheritance:
- IS-A relation, B IS-A C, so class B can extend class C.
- HAS-A relation, B HAS-A C, so class B can have an instance variable of class C.
- public members are inherited and private members are not.
- Anything that extends the reference variable can be assigned to the reference variable.
    Eg: List<String> myList = new ArrayList<>();

~ Types of inheritance:
1. Single Inheritance
    [Superclass]
         |
         v
     [Subclass]

2. Multilevel Inheritance
    [Grandparent Class]
        |
        v
    [Parent Class]
        |
        v
   [Child Class]

3. Hierarchical Inheritance (multiple classes inherit from a single superclass.)
         [Superclass]
        /            \
       v              v
[Subclass 1]     [Subclass 2]

4. Multiple Inheritance (multiple inheritance is not allowed through classes but for interfaces)
    [Interface 1]  [Interface 2]
        \                /
            v         v
              [Class]

5. Hybrid Inheritance (Multiple and Multi level)
    [Superclass]          [Interface 1]
        |                    |
        v                    v
    [Subclass]           [Interface 2]
           \               /
              v         v
                [Class] 

Eg: class Dog extends Mammal implements Animal, Walker {...}


* Abstraction:
Hiding details and showing essential things to the user.

Abstraction can be achieved using 2 ways:

1. Abstract class: 
- Defined with an abstract keyword. 
- May or may not have all the abstract methods. Some of them can be concrete methods.
- An abstract method must always be redefined in the subclass, unless the subclass itself is abstract.
- Abstract classes can not be directly instantiated using new operator.
- Abstract class can have parameterised constructor and default constructor is always present.
- Abstract is a java modifier not applicable for variables.
- We can have an abstract class without any abstract method. This allows us to create classes that cannot be instantiated but can only be inherited. 
- There can be final method in an abstract class, but an abstract method can not be declared as final.
- The abstract keyword for declaring top-level classes (Outer class) as well as inner classes as abstract
abstract class B {
    abstract class C {
        abstract void myAbstractMethod();
    }
}
class D extends B {
    class E extends C {
        void myAbstractMethod()
        { System.out.println("Inside abstract method implementation");}
    }
}
public class Main {
    public static void main(String args[])
    {
        D outer = new D();
        D.E inner = outer.new E();
        inner.myAbstractMethod();
    }
}

- Observations in the below example:
1. Abstract class cannot be created, we can have references to abstract class type though.
2. Abstract class can contain constructors in Java. And a constructor of an abstract class is called when an instance of an inherited class is created.
3. Abstract classes can also have final methods (methods that cannot be overridden)
4. We can define static methods in an abstract class that can be called independently without an object.

Eg:
abstract class Base {
    Base(){ System.out.println("Base Constructor Called");}
    abstract void fun();
    final void finalfun(){System.out.println("Base finalfun() called");}
    static void staticfun(){System.out.println("Geeks for Geeks");
}

class Derived extends Base {
    Derived(){System.out.println("Derived Constructor Called");}
    void fun(){ System.out.println("Derived fun() called");}
}

class GFG {
    public static void main(String args[])
    {
        //(1) point
        Base b = new Derived();
        b.fun(); //(2) point

        Derived d = new Derived();
        d.finalfun(); //(3) point

        Base.staticfun();     //(4) point
        Derived.staticfun();  //(4) point
    }
}

Output: 
Base Constructor Called
Derived Constructor Called
Derived fun() called
Base finalfun() called


2. Interface:
- Provides 100% abstraction
- 


* Polymorphism
1. Compile Time polymorphism: 
There are 3 types:
a. Function Overloading
b. Operator Overloading
c. Template 

A. Method overloading (multiple methods with the same name but different parameters)
=> class Helper {
    static int Multiply(int a, int b)     // Method with 2 integer parameters
    {
        return a * b; // Returns product of integer numbers
    }
    
    static double Multiply(double a, double b) // With same name but with 2 double parameters
    {
        return a * b; // Returns product of double numbers
    }
}

B. Operator Overloading (not supported in Java)
class Complex {
private:
    int real, imag;

public:
    Complex(int r = 0, int i = 0)
    {
        real = r;
        imag = i;
    }
    void print() { cout << real << " + i" << imag << endl; }
    friend Complex operator+(Complex const& c1, Complex const& c2); //The global operator function is made friend of this class so that it can access private members
};

Complex operator+(Complex const& c1, Complex const& c2) { 
    return Complex(c1.real + c2.real, c1.imag + c2.imag); 
}

int main() {
    Complex c1(10, 5), c2(2, 4);
    Complex c3 = c1 + c2; // An example call to &quot;operator+&quot;
    c3.print();
    return 0;
}

C. Template class (not supported in java)
template <typename T> T myMax(T x, T y) { // One function works for all data types. This would work even for user defined types if operator '>' is overloaded
    return (x > y) ? x : y;
}

int main() {
    cout << myMax<int>(3, 7) << endl;  // Call myMax for int
    cout << myMax<double>(3.0, 7.0) << endl; // call myMax for double
    cout << myMax<char>('g', 'e') << endl; // call myMax for char
    return 0;
}

2. Run Time polymorphism (Dynamic Method Dispatch): 
A function call to the overridden method is resolved at Runtime. 

class Parent {
    void Print() {  System.out.println("parent class"); }
}

class subclass1 extends Parent {
    void Print() { System.out.println("subclass1"); }
}

class subclass2 extends Parent {
    void Print() { System.out.println("subclass2"); }
}

class GFG {
    public static void main(String[] args)
    {
        Parent a; // Creating object of class 1 Â  

        a = new subclass1();
        a.Print();

        a = new subclass2();
        a.Print();
    }
}
Output
subclass1
subclass2

* Java call by value and call by reference

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Arrays and Strings
4. Data Structure
5. File Handling
6. Object Serialization
7. Java Threads
8. Regular Expressions
9. Socket Programming
10. Design Patterns


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



1. javac compiler compiles the java code to bytecode (code.class) and jvm converts this into something the underlying machine understands.
2. Nearly everything in java is an object.
3. Java is strongly typed language and compiler won't allow variables to hold data of another type.
4. Object lives on the Heap. 


13. What happens when the argument is object ==> We pass the copy of remote control(variable that points the object)


16. == operator (compares bits) => refer to single object on heap
17. .equals() => if 2 objects are equal.

*Inhertitance
18. IS-A relation, B IS-A C, so class B can extend class C.
19. HAS-A relation, B HAS-A C, so class B can have an instance variable of class C.
20. Anything that extends the reference variable can be assigned to the reference variable.
    Eg: List<String> myList = new ArrayList<>();

*Overriding
21. You can override the inherited methods.
22. There is no term like private class, you can use inner class.
23. A class can be non public, which is inherited only by the classes of same package.
24. A modifier final -> end of inheritance.

*Polymorphism 
25. Compile-time polymorphism => ensured by method overloading
26. Run time polymorphism => ensured by method overriding 
    Parent a;
    a = new subclass1();
    a.Print(); 
    a = new subclass2();
    a.Print();
    // the above print methods were overriden.

27. Abstract classes, the ones that cannot be instantiated. But you can still use them as reference variables.
28. Abstract classes must be extended, abstract methods must be overriden.
29. You cannot have an abstract method in a non abstract class.
30. Non abstract classes are called -> concrete classes.
31. List<Object> objList = new Object();
    objList.add(1);
    int tmp = objList.get(0) // Compilation error.
    The compiler always looks for reference type and not object type.
    
    int tmp = (int) objList.get(0) // This will work.







1. Why is Java a platform independent language?
- developed to not depend on any hardware or software.
- compiler compiles the code and then converts it to platform-independent byte code.

2. Why is Java not a pure object oriented language?
- Java supports primitive data types like int, boolean, char.

3. Difference between Heap and Stack Memory in java. And how java utilizes this.
Stack Memory: all variables, methods.
Heap Memory: objects referenced from stack memory.

4. What do you understand by an instance variable and a local variable?
class Athlete {
  public String athleteName;  --------  
  public double athleteSpeed;        | --> instance variables
  public int athleteAge;      --------

  public void athlete(int name) { // local variable
    String athleteName;     --------
    double athleteSpeed;           | -> Local variables
    int athleteAge = name;   -------
  }
}

5. What are the default values assigned to variables and instances in java?
variables -> no default, compulsory intialisation else compilation error.
instances -> depends on data type, null for reference, 0 for numeric, false for boolean.

6. What do you mean by data encapsulation?
concept of hiding data atributes and behaviour in a single unit. 
helps developer to follow modularity, and ensures security of private properties.

7. Tell us something about JIT compiler.

***8. Can you tell the difference between equals() method and equality operator (==) in Java?

9. How is an infinite loop declared in Java?
-> for (;;){}
-> while(true){}
-> do{
   }while(true);

10. Briefly explain the concept of constructor overloading
constructors with different signatures.

11. Define Copy constructor in java.
// constructor that initialises the new object with old object.
class InterviewBit{
   String department;
   String service;
   InterviewBit(InterviewBit ib){
       this.departments = ib.departments;
       this.services = ib.services;
   }
}

12. Can the main method be Overloaded?
Yes, but only the default one will be called by JVM.
public static void main(string[] args)

13. Comment on method overloading and overriding by citing relevant examples.
method overloading -> methods in same class with same name, but different signatures.
method overriding -> methods with same signature and name are overriden from the inherited class.

14. Explain the use of final keyword in variable, method and class.
    Final -> non access modifier.
    a. Final variable --> constant variable, cannot be re-initialised.
       if no value assigned, can only be assigned by constructor.
    b. Final Method --> To prevent overriding.
      constructors cannot be final.
    c. Final class --> To prevent inheritance
        
15. Do final, finally and finalize keywords have the same function?
Final: value becomes fixed.
Finally: block used to execute important code, this block executes regardless of above conditions. 
Finalize: used to perform cleanup activity before destroying any object.
import java.lang.*;
Eg: 
public class Demo {
  protected void finalize() throws Throwable {
    try { 
    } catch (Throwable e) { 
        throw e; 
    } finally {         //use of finally that always gets executed.
      super.finalize(); // Calling finalize() of Object class
    }
  }
  public static void main(String[] args) throws Throwable {
    demo d = new demo();
    d.finalize(); 
  }
}

16. Is it possible that the âfinallyâ block will not be executed? If yes then list the case.
- If System.exit() is used.
- fatal errors like Stack overflow, Memory access error, etc.

17. When can you use super keyword?
-> used to access parent class' data members, constructors, methods when child has overriden them.

18. Why is the main method static in Java?
Static members belong to the classes, not to an individual object. 
If it was not static, then each object will have an instance of main method -> not acceptable by JVM. 
JVM calls the main method based on the class name itself. Not by creating the object.
There must be only 1 main method in the java program as the execution starts from the main method. 

19. Can the static methods be overloaded? 
-> Yes! 

20. Can the static methods be overridden?
Overriding or dynamic polymorphism occurs during the runtime.
but static methods are loaded and looked up at the compile time statically. Hence, these methods can't be overridden.

21. Difference between static methods, static variables, and static classes in java.
Static variables & Methods: belongs to class and not to object, gets memory when class is loaded, called directly with the help of class names.
Eg - Math.max(), .length;
Static classes: only posssible in case of inner class and inner static class works exactly like other static members.

22. What is the main objective of garbage collection?
-> frees up the memory space occupied by the unnecessary and unreachable objects by deleting them.

23. What is a ClassLoader?
- program that belongs to JRE (Java Runtime Environment). 
- loads the required classes and interfaces to the JVM when required. 
Example- To get input from the console, we require the scanner class. And the Scanner class is loaded by the ClassLoader.

24. What part of memory - Stack or Heap - is cleaned in garbage collection process?
-> Heap.

25. What are shallow copy and deep copy in java?
* Shallow Copy: //diff ref variable points the same object
    Rectangle obj1 = new Rectangle(); 
    Rectangle obj2 = obj1;
    // if obj1 changes then obj2 also changes
* Deep Copy: 
    Rectangle obj3 = new Rectangle();
    Obj3.length = obj1.length;
    Obj3.breadth = obj1.breadth;
  or
    obj2 = obj1.clone(); 
    // no impact on obj3 if obj1 changes

26. Apart from the security aspect, what are the reasons behind making strings immutable in Java?
String pool -> a storage area in java heap to store string literals.




