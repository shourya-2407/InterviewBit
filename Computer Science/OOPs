1. What is Object Oriented Programming (OOP)?
- A computer programming model that organizes software design around data, or objects, rather than functions and logic.
- An object can be defined as a data field that has unique attributes and behavior.
- Benefits of OOP include code reusability, scalability and efficiency.

Structure of OOP:
1. classes: user-defined data types that act as the blueprint for individual object.
2. objects: are instances of a class created with specifically defined data. 
3. methods: are functions that objects can perform.
4. attributes: represent the state of an object.

Main principles of OOPs:
1. Encapsulation: principle states that all imp info is contained inside an object and only select info is exposed.
2. Abstration: hiding any unnecessary implementation code, reveal internal mechanisms that are relevant for the use of other objects.
3. Inheritance: Classes can reuse code and properties from other classes. 
4. Polymorphism: Objects are designed to share behaviors, and they can take on more than one form.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Why OOPs?	
Benefits of OOPs: modularity, reusability, interface description, security, Easily upgradable and scalable. And also tell add Q1 to ans.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. What is a Class?	
- a set of objects which shares common characteristics/behavior and common properties/attributes.
- a template or blueprint or prototype from which objects are created.
- Class does not occupy memory.

Components of Java classes:
1. Modifiers: A class can be public or has default(package-private) access.
2. Class keyword: class keyword is used to create a class.
3. Class name: The name should begin with a capital letter.
4. Superclass(if any): A class can only extend (subclass) one parent.
5. Interfaces(if any): A comma-separated list of interfaces implemented by the class preceded by the keyword implements.
6. Body: The class body is surrounded by braces, { }.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. What is an Object?	
- are instances of a class that are created to use the attributes and methods of a class.
- components: state(fields define state), behaviour(methods define behaviour) and identity(unique name given to object)

Ways to create an object of class:
1. Using new keyword => Test t = new Test();
2. Using Class.forName(String className) method => Test obj = (Test)Class.forName("com.p1.Test").newInstance();
3. Using clone() method
   Test t1 = new Test();
   Test t2 = (Test)t1.clone();
4. Deserialization
   FileInputStream file = new FileInputStream(filename);
   ObjectInputStream in = new ObjectInputStream(file);
   Object obj = in.readObject();

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5. What are the main features of OOPs?	
=> a. Class
   b. Objects
   c. Encapsulation
   d. Abstraction
   e. Polymorphism
   f. Inheritance
   g. Dynamic Binding
   h. Message Passing

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

6. What is Encapsulation?	
- wrapping up data and information under a single unit (class).
- Encapsulation also leads to data abstraction or data hiding.
- variables are private and getter-setter to access variables.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

7. What is Abstraction?	
- process in which we only show essential details/functionality to the user.
- Eg: TV remote, it simplifies interaction with TV hiding the complexity between simple buttons.
- In java, abstraction is achieved by abstract classes and interfaces.
- One key reason we use abstract concepts is to simplify complexity.
- Ensures that the classes that extend it have a consistent structure and behavior.
- Abstract classes and methods enable polymorphism in Java.

~ Abstract class: declared with an abstract keyword.
~ Abstract methods: method that is declared without implementation.
~ Abstract class may or may not have all abstract methods.
~ Abstract method must always be redefined in the subclass, thus making overriding compulsory or making the subclass itself abstract.
~ Any class that contains one or more abstract methods => must be declared with an abstract keyword.
~ Cannot directly instantiate abstract classes.

Interface:
- another way to implement abstraction.
- can achieve 100% abstraction in Java classes.

1.Class Inheritance (extends):
Class A
   ↑
Class B extends Class A

2. Class Implementation of Interface (implements):
Interface I
   ↑
Class C implements Interface I

3. Interface Inheritance (extends):
Interface J
   ↑
Interface K extends Interface J

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

8. What is Polymorphism?	
Polymorphism in Java is a concept by which we can perform a single action in different ways.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

9. What is Inheritance? What is its purpose?	
 - a mechanism by which one object can acquire all the properties (i.e. data members) 
   and behavior (i.e. member functions or methods) of a parent object.
 - The inherited fields & methods can be used directly, just like any other fields.
 - Syntax:
      class Subclass-name extends Superclass-name  
      {  
         //methods and fields  
      }  
  - Types of inheritance:
   a. Single inheritance:
      ClassA
        ↓
      ClassB

   b. Multilevel Inheritance:
      ClassA
        ↓
      ClassB
        ↓
      ClassC

   c. Hierarchical Inheritance:     
         ClassA   
         ↙    ↘
      ClassB   ClassC

   d. Multiple Inheritance (Through Interfaces):
      ClassA  ClassB
        ↘       ↙
          ClassC
      Java does not support multiple inheritances with classes, only through Interfaces.

   e. Hybrid Inheritance: 
           ClassA
           ↙    ↘
      ClassB    ClassC
          ↘       ↙
           ClassD
      In Java, we can achieve hybrid inheritance only through Interfaces

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

10. What are access specifiers? What is their significance in OOPs?	
   Types of Access Modifiers in Java:
   1. Default – No keyword required, access level is only within the package.
   2. Private - access level is only within the class.
   3. Protected - access level of a is within the package and outside the package through child class.
   4. Public - access level of a public modifier is everywhere.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

11. What are the advantages and disadvantages of OOPs?	
Advantages:
Modular, Efficient, Scalable, Concurrent(multiple instances co-exist), Reusable, Secure

Disadvantages: 
Verbose(tend to be larger and more complex), Overhead(programs can incur additional resource usage and execution time)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12. What other paradigms of programming exist besides OOPs?	
13. What is the difference between Structured Programming and Object Oriented Programming?	

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

14. What are some commonly used Object Oriented Programming Languages?	
Python, Java, C++, Javascript, C#, Ruby, PHP, Typescript, Kotlin, R

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

15. What are the different types of Polymorphism?	
a. Compile Time polymorphism: 
   1. Method overloading: 
      - Methods with same name but different parameters.
      - Methods can be overloaded by changing number of arguments or types of arguments.

   2. Operator overloading: 
      single operator ‘+’, when placed between integer operands, adds them and when placed between string operands, concatenates them. 
      But Java doesn’t support the Operator Overloading. 

b. Run Time polymorphism: 
   - also known as Dynamic Method Dispatch or Late Binding or Dynamic polymorphism.

   1. Function overriding:
      - when a derived class has a definition for one of the member functions of the base class.
      - a process in which a function call to the overridden method is resolved at Runtime.
      - Upcasting => If the reference variable of Parent class refers to the object of Child class. 
      - Eg: 
         Parent a;
         a = new subclass1();
         a.Print(); //method overriding, subclass1 method invoked
         b = new subclass2();
         b.Print(); //method overriding, subclass2 method invoked
      - since it refers to the subclass object and subclass method overrides the Parent class method, 
        the subclass method is invoked at runtime.
      - In C++, keyword “virtual” is used inside a base class.
   
  2. Java Runtime Polymorphism with Data Member:
   - A method is overridden, not the data members, so runtime polymorphism can't be achieved by data members.
     class Bike{  
        int speedlimit=90;  
     }  
     
     class Honda3 extends Bike{  
         int speedlimit=150;  
  
         public static void main(String args[]){  
           Bike obj=new Honda3();  
           System.out.println(obj.speedlimit); //90  will get printed
         }  
      }


     
