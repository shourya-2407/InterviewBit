1. What is Object Oriented Programming (OOP)?
- A computer programming model that organizes software design around data, or objects, rather than functions and logic.
- An object can be defined as a data field that has unique attributes and behavior.
- Benefits of OOP include code reusability, scalability and efficiency.

Structure of OOP:
1. classes: user-defined data types that act as the blueprint for individual object.
2. objects: are instances of a class created with specifically defined data. 
3. methods: are functions that objects can perform.
4. attributes: represent the state of an object.

Main principles of OOPs:
1. Encapsulation: principle states that all imp info is contained inside an object and only select info is exposed.
2. Abstration: hiding any unnecessary implementation code, reveal internal mechanisms that are relevant for the use of other objects.
3. Inheritance: Classes can reuse code and properties from other classes. 
4. Polymorphism: Objects are designed to share behaviors, and they can take on more than one form.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Why OOPs?	
Benefits of OOPs: modularity, reusability, interface description, security, Easily upgradable and scalable. And also tell add Q1 to ans.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. What is a Class?	
- a set of objects which shares common characteristics/behavior and common properties/attributes.
- a template or blueprint or prototype from which objects are created.
- Class does not occupy memory.

Components of Java classes:
1. Modifiers: A class can be public or has default(package-private) access.
2. Class keyword: class keyword is used to create a class.
3. Class name: The name should begin with a capital letter.
4. Superclass(if any): A class can only extend (subclass) one parent.
5. Interfaces(if any): A comma-separated list of interfaces implemented by the class preceded by the keyword implements.
6. Body: The class body is surrounded by braces, { }.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. What is an Object?	
- are instances of a class that are created to use the attributes and methods of a class.
- components: state(fields define state), behaviour(methods define behaviour) and identity(unique name given to object)

Ways to create an object of class:
1. Using new keyword => Test t = new Test();
2. Using Class.forName(String className) method => Test obj = (Test)Class.forName("com.p1.Test").newInstance();
3. Using clone() method
   Test t1 = new Test();
   Test t2 = (Test)t1.clone();
4. Deserialization
   FileInputStream file = new FileInputStream(filename);
   ObjectInputStream in = new ObjectInputStream(file);
   Object obj = in.readObject();

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

5. What are the main features of OOPs?	
=> a. Class
   b. Objects
   c. Encapsulation
   d. Abstraction
   e. Polymorphism
   f. Inheritance
   g. Dynamic Binding
   h. Message Passing

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

6. What is Encapsulation?	
- wrapping up data and information under a single unit (class).
- Encapsulation also leads to data abstraction or data hiding.
- variables are private and getter-setter to access variables.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

7. What is Abstraction?	
- process in which we only show essential details/functionality to the user.
- Eg: TV remote, it simplifies interaction with TV hiding the complexity between simple buttons.
- In java, abstraction is achieved by abstract classes and interfaces.
- One key reason we use abstract concepts is to simplify complexity.
- Ensures that the classes that extend it have a consistent structure and behavior.
- Abstract classes and methods enable polymorphism in Java.

~ Abstract class: declared with an abstract keyword.
~ Abstract methods: method that is declared without implementation.
~ Abstract class may or may not have all abstract methods.
~ Abstract method must always be redefined in the subclass, thus making overriding compulsory or making the subclass itself abstract.
~ Any class that contains one or more abstract methods => must be declared with an abstract keyword.
~ Cannot directly instantiate abstract classes.

Interface:
- another way to implement abstraction.
- can achieve 100% abstraction in Java classes.

1.Class Inheritance (extends):
Class A
   ↑
Class B extends Class A

2. Class Implementation of Interface (implements):
Interface I
   ↑
Class C implements Interface I

3. Interface Inheritance (extends):
Interface J
   ↑
Interface K extends Interface J



8. What is Polymorphism?	Link
9. What is Inheritance? What is its purpose?	Link
10. What are access specifiers? What is their significance in OOPs?	Link
11. What are the advantages and disadvantages of OOPs?	Link
12. What other paradigms of programming exist besides OOPs?	Link
13. What is the difference between Structured Programming and Object Oriented Programming?	Link
14. What are some commonly used Object Oriented Programming Languages?	Link
15. What are the different types of Polymorphism?	
