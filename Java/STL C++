*** Unordered Sets in C++ STL
    Stores unique elements in no particular order.
    avg case: O(1) (all operations)
    worst case: O(n) 

    unordered_set<int> s;
    s.insert(1);
    s.begin();
    s.find(2) != s.end()


*** vectors in C++ STL
    stores element in contiguous memory location.
    changes size accordingly.

    vector<int> v1;
    v1.begin();
    v1.push_back(1);


*** Set in C++ STL
    Stores unique elements in particular order.
    avg case: O(1) (all operations)
    worst case: O(n) 

    set<int> s;
    s.insert(1);
    s.find(2) != s.end()


*** unordered_multiset in C++ STL
    just like an unordered set the only difference is it can store duplicate elements

    unordered_multiset<int> s;
    (functions similar to unordered set)


*** multiset in C++ STL
    just like an ordered set the only difference is it can store duplicate elements

    multiset<int> s;
    (functions similar to ordered set)


*** unordered_map in C++ STL
    key-value pair in any order.
    2 mapped values, cannot have same key.

    unordered_map<int,int> mp;
    mp.insert({1,10});


*** map in C++ STL
    key-value pair in sorted order.
    2 mapped values, cannot have same key.

    unordered_map<int,int> mp;
    mp.insert({1,10});
    

*** unordered_multimap in C++ STL
    just like an unordered map the only difference is it can store duplicate elements

    unordered_multimap<int,int> mp;
    (functions similar to unordered map)


*** multimap in C++ STL
    just like an ordered map the only difference is it can store duplicate elements

    multimap<int,int> mp;
    (functions similar to ordered map)


*** queue in C++ STL
    FIFO data structure
    queue<int> q;

    q.push();
    q.pop();
    q.insert();
    q.emplace();

Advantage of emplace over insert, emplace avoids object referencing or copying. It does in place insertion.
This doesn't matter in case of primitive data types, but emplace has an edge in case of objects.


*** stack in C++ STL
    LIFO DS.

    stack<int> s;
    s.push();
    s.pop();
    s.emplace();


*** deque in C++ STL
    Doubly ended queue, deletion and insertion can be from front and rear.

    deque<int> dq;
    dq.push_back(1);
    dq.push_front(1);
    dq.pop_back();
    dq.pop_front();
  

*** priority_queue in C++ STL
    max heap: elements are present in descending order
    min heap: elements are present in ascending order

    Syntax for a max-heap priority queue:
    priority_queue<object_type> variable_name;

    Min heap: 
    priority_queue<object_type,vector<object_type>,greater<object_type>> variable_name;


*** list in C++ STL
    Allows inserting and erasing elements in constant amount of time.
    Inserting, Deletion, Iteration can be done both ways.

    list<int> li;
    li.push_back(110);
    li.push_front(110);


*** next_permutation in STL
    This is a built-in function that provides next lexicographically greater permutation.

    Eg:
    vector<int> vec = {1,3,2};
    next_permutation(vec.begin(), vec.end());
    ==> {2, 1, 3}


*** __builtin_popcount() in STL
    Returns the number of set bits.
    Works only for unsigned or positive integers.

    int n = 7;
    cout<<__builtin_popcount(n);
    ==> 3.

    long long n = 77777777777777;
    cout<<__builtin_popcountll(n);
    ==> 23.


*** sort() in C++ STL
    Efficient: Uses quicksort() and mergesort() in its internal implementation.

    int arr[] = {4,2,1};
    sort(arr, arr+3);
    sort(arr, arr+3, greater<int>());


*** min_element() in C++ STL
    *min_element(first index,last index);


*** max_element() in C++ STL
    *max_element(first index,last index);

