class Solution {
    public void findSubset(int ind, int[] candidates, List<Integer> subList, List<List<Integer>> ans, int target){
        if(ind == candidates.length){
            if(target == 0){
                ans.add(new ArrayList<>(subList));
            }
            return;
        }
        if(target < 0){
            return;
        }
    
        // add element and allow to process the same element again
        subList.add(candidates[ind]);
        findSubset(ind, candidates, subList, ans, target - candidates[ind]);

        // remove the element and increase the index
        subList.remove(subList.size() - 1);
        findSubset(ind + 1, candidates, subList, ans, target);

    }

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        findSubset(0, candidates, new ArrayList<>(), ans, target);
        return ans;
    }
}
