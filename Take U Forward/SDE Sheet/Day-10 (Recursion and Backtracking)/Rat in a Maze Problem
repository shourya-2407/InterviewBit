class Solution {
    
    public static boolean isSafe(int row, int col, int[][] m, int vis[][], int n) {
        if (
            (row >= 0 && row < n) && (col >= 0 && col < n) &&
            m[row][col] == 1 &&
            vis[row][col] != 1
        ) {
            return true; 
        }
        return false; 
    }
    
    public static void solve(ArrayList<String> ans, String path, int row, int col, int[][] m, int[][] vis, int n){
        if(row == n - 1 && col == n - 1){
            ans.add(path);
            return;
        }
        
        vis[row][col] = 1;
        
        if(isSafe(row + 1, col, m, vis, n)){
            solve(ans, path + "D", row + 1, col, m, vis, n);
        } 
        if(isSafe(row - 1, col, m, vis, n)){
            solve(ans, path + "U", row - 1, col, m, vis, n);
        }
        if(isSafe(row, col + 1, m, vis, n)){
            solve(ans, path + "R", row, col + 1, m, vis, n);
        }
        if(isSafe(row, col - 1, m, vis, n)){
            solve(ans, path + "L", row, col - 1, m, vis, n);
        }
        
        vis[row][col] = 0;
    }
    
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        String path = "";
        ArrayList<String> ans = new ArrayList<>();
        
        int vis[][] = new int[n][n];
        for (int i = 0; i < n; i++) {
            Arrays.fill(vis[i], 0);
        }
        
        if (m[0][0] == 0) {
            return ans;
        }
        
        solve(ans, path, 0, 0, m, vis, n);
        return ans;
    }
}
