Learnings: 
Arrays can be sorted from a particular index as well. 
Arrays.sort(arr, ind1, ind2); (Not used here though due to time complexity, instead used reverse)


Algorithm: 
- Firstly from the behind, find where the ascending gradient is broken.
- Store the index and find the value that can replace that index.
- Then sort the array after the index.


Java:
class Solution {
    public void nextPermutation(int[] nums) {
        int index1=-1;
    
        for(index1=nums.length-2;index1>=0;index1--){
            if(nums[index1]<nums[index1+1]){
                break;
            }
        }
     
        if(index1==-1){
            reverse(nums,0);
            return;
        }
        
        int index2=-1;
        for(int i=nums.length-1;i>=index1;i--){
            if(nums[i]>nums[index1]){
                index2=i;
                break;
            }
        }

        swap(nums,index1,index2);
        
        reverse(nums,index1+1);
        
    }
    void swap(int[] nums,int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }

    void reverse(int[] nums,int start){
        int i=start;
        int j=nums.length-1;
        while(i<j){
            swap(nums,i,j);
            i++;
            j--;
        }
    }
}
