// Logic: 
// Topological Sort -> if u --> v then in the output sequence, u should come before v
// Use stack to store the DFS output in reverse order

class Solution
{
    public static void dfs(int node, boolean[] vis, ArrayList<ArrayList<Integer>> adj, Stack<Integer> stack){
        vis[node] = true;
        
        for(int child : adj.get(node)){
            if(!vis[child]){
                dfs(child, vis, adj, stack);
            }                
        }
        
        stack.push(node);
    } 
    
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        Stack<Integer> st = new Stack<Integer>();
        boolean[] vis = new boolean[V];
        Arrays.fill(vis, false);
        
        for(int i = 0; i < V; i++){
            if(!vis[i])
                dfs(0, vis, adj, st);   
        }
        
        int[] ans = new int[V];
        int i = 0;
        while(!st.isEmpty()){
            ans[i++] = st.peek();
            st.pop();
        }
        return ans;
    }
}
