// Logic: 
// BFS -> queue
// undirected -> use normal BFS and maintain the parent 

class Node{
    int node;
    int parent;
    
    Node(int node, int parent){
        this.node = node;
        this.parent = parent;
    }
}

class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] vis = new boolean[V];
        Arrays.fill(vis, false);
        
        for(int i = 0; i < V; i++){
            if(!vis[i]){
                if(checkForCycle(i, V, adj, vis)) return true;
            }
        }
        
        return false;
    }
    
    public boolean checkForCycle(int ind, int V, ArrayList<ArrayList<Integer>> adj, boolean[] vis){
        vis[ind] = true;
        
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(ind, -1));
        
        while(!q.isEmpty()){
            Node tmp = q.remove();
            
            for(int child : adj.get(tmp.node)){
                if(!vis[child]){
                    vis[child] = true;
                    q.add(new Node(child, tmp.node));
                } else if(child != tmp.parent){
                    return true;
                }
            }
        }
        
        return false;       
    }
}
