class Solution {
    public void dfs(int i, int j, char[][] grid, boolean[][] vis, int m, int n){
        vis[i][j] = true;

        if(i + 1 < m && grid[i + 1][j] == '1' && !vis[i + 1][j]) dfs(i + 1, j, grid, vis, m, n);
        if(j + 1 < n && grid[i][j + 1] == '1' && !vis[i][j + 1]) dfs(i, j + 1, grid, vis, m, n);
        if(i - 1 >= 0 && grid[i - 1][j] == '1' && !vis[i - 1][j]) dfs(i - 1, j, grid, vis, m, n);
        if(j - 1 >= 0 && grid[i][j - 1] == '1' && !vis[i][j - 1]) dfs(i, j - 1, grid, vis, m, n);

    }

    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0; // Empty grid, no islands
        }

        int m = grid.length;
        int n = grid[0].length;

        boolean[][] vis = new boolean[m][n];
        for(int i = 0; i < m; i++){
            Arrays.fill(vis[i], false);
        }

        int cnt = 0;        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(!vis[i][j] && grid[i][j] == '1'){
                    dfs(i, j, grid, vis, m, n);
                    cnt++;
                }
            }
        }
        
        return cnt;
    }
}
        // for(int i = 0; i < m; i++){
        //     for(int j = 0; j < n; j++){
        //         System.out.print(vis[i][j] + " ");
        //     }
        //     System.out.println("");
        // }
