// Using recursion
class Tree
{
    //Function to return list containing elements of left view of binary tree.
    ArrayList<Integer> leftView(Node root)
    {
      ArrayList<Integer> list = new ArrayList<>();
      printLeftView(root, list, 1);
      return list;
    }

    public static void printLeftView(Node root, ArrayList<Integer> list, int level) {
        if (root == null) return;

        if (list.size() < level) {
            list.add(root.data);
        }

        // Traverse the left child first, then the right child
        printLeftView(root.left, list, level + 1);
        printLeftView(root.right, list, level + 1);
    }
}

// Using queue
ArrayList<Integer> leftView(Node root)
{
  // Your code here
  ArrayList<Integer> list = new ArrayList<>();
  if (root == null) return list;
  Queue<Node> queue = new LinkedList<>();
  queue.offer(root);
  
  while(!queue.isEmpty()){
      int size = queue.size();
      for(int i = 0; i < size; i++){
          Node tmp = queue.poll();
          if(i == 0){
              list.add(tmp.data);
          }
          if(tmp.left != null) queue.add(tmp.left);
          if(tmp.right != null) queue.add(tmp.right);
      }
  }
  return list;
}
