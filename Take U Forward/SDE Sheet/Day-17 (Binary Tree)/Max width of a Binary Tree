/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class INodes{
    TreeNode root;
    Integer ind;
    
    INodes(TreeNode root, Integer ind){
        this.root = root;
        this.ind = ind;
    }
}
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;

        int ans = 0;
        Queue<INodes> q = new LinkedList<>();
        q.offer(new INodes(root, 1));

        while(!q.isEmpty()){
            int minInd = 0;
            int maxInd = 0;
            int size = q.size();
            for(int i = 0; i < size; i++){
                INodes tmp = q.poll();
                if(i == 0){
                    minInd = tmp.ind;
                }
                if(i == size - 1){
                    maxInd = tmp.ind;
                } 
                if(tmp.root.left != null) q.add(new INodes(tmp.root.left, tmp.ind*2));
                if(tmp.root.right != null) q.add(new INodes(tmp.root.right, tmp.ind*2 + 1));
            }
            
            ans = Math.max(ans, maxInd - minInd + 1);
        }
        return ans;
    }
}
