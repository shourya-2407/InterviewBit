/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Pairs{
    TreeNode node;
    int col;
    int row;

    Pairs(TreeNode node, int row, int col){
        this.node = node;
        this.row = row;
        this.col = col; 
    } 
}

class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {

        List<List<Integer>> list = new ArrayList<>();
        if(root == null) return list;

        TreeMap < Integer, TreeMap < Integer, PriorityQueue < Integer >>> map = new TreeMap<>();
  
        Queue<Pairs> q = new LinkedList<Pairs>();
        q.offer(new Pairs(root, 0, 0));

        while(!q.isEmpty()){

            Pairs pairs = q.poll();

            TreeNode node = pairs.node;
            int col = pairs.col;
            int row = pairs.row;

            if(!map.containsKey(col)) map.put(col,new TreeMap<>());

            if(!map.get(col).containsKey(row)) map.get(col).put(row,new PriorityQueue<>());

            map.get(col).get(row).add(node.val);

            if(node.left!=null) q.add(new Pairs(node.left,row+1,col-1));
            if(node.right!=null) q.add(new Pairs(node.right, row+1,col+1));
        }

        for(TreeMap<Integer,PriorityQueue<Integer>> yn : map.values()){

            list.add(new ArrayList<>());

            for(PriorityQueue<Integer> nodes : yn.values()){
                while(!nodes.isEmpty()){
                    list.get(list.size()-1).add(nodes.poll());
                }
            }
        }return list;
    }
}
