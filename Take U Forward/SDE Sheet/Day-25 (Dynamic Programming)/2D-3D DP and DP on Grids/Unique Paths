// Recursion
class Solution {
    public int uniquePaths(int m, int n) {
        if (m == 0 || n == 0) {
            return 0;
        } 
        if (m == 1 && n == 1) {
            return 1; 
        }
        return uniquePaths(m - 1, n) + uniquePaths(m, n - 1);
    }
}

// DP
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        return countWaysUtil(m, n, dp);
    }

     static int countWaysUtil(int m, int n, int[][] dp) {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }

                int up = 0;
                int left = 0;

                if (i > 0)
                    up = dp[i - 1][j];
                if (j > 0)
                    left = dp[i][j - 1];

                dp[i][j] = up + left;
            }
        }
        return dp[m - 1][n - 1];
    }
}
