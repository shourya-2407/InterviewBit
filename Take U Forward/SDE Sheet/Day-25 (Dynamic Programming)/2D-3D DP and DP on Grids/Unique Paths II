// Recursion
class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;


        return countWays(grid, m - 1, n - 1);
    }

    private int countWays(int[][] grid, int m, int n){
        if(m == 0 && n == 0 && grid[m][n] == 0) return 1;
        if(m < 0 || n < 0) return 0;

        if(grid[m][n] != 1){
            return countWays(grid, m - 1, n) + countWays(grid, m, n - 1);
        } else{
            return 0;
        }
    }
}

// DP 
class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        int[][] dp = new int[m][n];

        for (int i = 0; i < m; i++) {
            Arrays.fill(dp[i], 0);
        }

        if (grid[0][0] == 0) {
            dp[0][0] = 1;
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    continue;
                }

                if (i > 0) {
                    dp[i][j] += dp[i - 1][j];
                }

                if (j > 0) {
                    dp[i][j] += dp[i][j - 1];
                }
            }
        }
        return dp[m - 1][n - 1];
    }
}
