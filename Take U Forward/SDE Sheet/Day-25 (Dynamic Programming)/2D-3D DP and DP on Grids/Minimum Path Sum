// Recursion
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        return findMinPath(grid, m - 1, n - 1);
    }

    private int findMinPath(int[][] grid, int m, int n){
        if(m == 0 && n == 0) return grid[0][0];
        if(m < 0 || n < 0) return Integer.MAX_VALUE;

        return grid[m][n] + Math.min(findMinPath(grid, m - 1, n), findMinPath(grid, m, n - 1)); 
    }
}

// DP
class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        int dp[][] = new int[n][m];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == 0 && j == 0)
                    dp[i][j] = grid[i][j]; 
                else {
                    int up = grid[i][j];
                    if (i > 0)
                        up += dp[i - 1][j]; 
                    else
                        up += (int) Math.pow(10, 9); 

                    int left = grid[i][j];
                    if (j > 0)
                        left += dp[i][j - 1]; 
                    else
                        left += (int) Math.pow(10, 9); 

                    dp[i][j] = Math.min(up, left);
                }
            }
        }

        return dp[n - 1][m - 1];
    }

}
