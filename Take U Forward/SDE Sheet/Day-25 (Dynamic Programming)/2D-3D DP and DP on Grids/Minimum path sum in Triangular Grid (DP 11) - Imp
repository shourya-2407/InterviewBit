// Recursion
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int minVal = Integer.MAX_VALUE;

        return findMinPath(triangle, 0,  0);
    }

    private int findMinPath(List<List<Integer>> triangle, int n, int i){
        if(n == triangle.size()) return 0;

        int minVal = Math.min(findMinPath(triangle, n + 1,  i), findMinPath(triangle, n + 1,  i + 1));

        return triangle.get(n).get(i) + minVal;
    }
}

// DP
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();

        int dp[][] = new int[n][n];

        for (int j = 0; j < n; j++) {
            dp[n - 1][j] = triangle.get(n - 1).get(j);
        }

        for (int i = n - 2; i >= 0; i--) {
            for (int j = i; j >= 0; j--) {
                int down = triangle.get(i).get(j) + dp[i + 1][j];
                int diagonal = triangle.get(i).get(j) + dp[i + 1][j + 1];

                dp[i][j] = Math.min(down, diagonal);
            }
        }

        return dp[0][0];
    }
}
