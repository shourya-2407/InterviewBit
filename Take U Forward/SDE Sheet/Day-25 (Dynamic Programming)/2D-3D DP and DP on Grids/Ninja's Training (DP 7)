// Recursion
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        // Write your code here..

        int maxVal = Integer.MIN_VALUE;
        for(int i = 0; i <= 2; i++){
            int ans = maxMeritPoints(n, points, i, 0); 
            maxVal = Math.max(ans, maxVal);
        }
    
        return maxVal;
    }

    private static int maxMeritPoints(int n, int points[][], int ind, int day){
        if(day == n){
            return 0;
        } 
        int maxVal = Integer.MIN_VALUE;

        for(int i = 0; i <= 2; i++){
            if(i != ind){
                int n1 = points[day][ind] + maxMeritPoints(n, points, i, day + 1); 
                maxVal = Math.max(n1, maxVal);
            }
        }

        return maxVal;
    }
}

// DP
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {
        int[][] dp = new int[n][3];

        for (int i = 0; i < 3; i++) {
            dp[0][i] = points[0][i];
        }

        for (int day = 1; day < n; day++) {
            for (int ind = 0; ind < 3; ind++) {
                int maxVal = Integer.MIN_VALUE;
                for (int i = 0; i < 3; i++) {
                    if (i != ind) {
                        int n1 = points[day][ind] + dp[day - 1][i];
                        maxVal = Math.max(n1, maxVal);
                    }
                }
                dp[day][ind] = maxVal;
            }
        }

        // Find the maximum points for the last day
        int maxVal = Integer.MIN_VALUE;
        for (int i = 0; i < 3; i++) {
            maxVal = Math.max(maxVal, dp[n - 1][i]);
        }

        return maxVal;
    }
}

