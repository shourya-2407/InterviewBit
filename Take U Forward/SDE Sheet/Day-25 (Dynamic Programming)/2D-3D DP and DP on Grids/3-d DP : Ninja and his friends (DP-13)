// Recursion
public class Solution {

    public static int maximumChocolates(int r, int c, int[][] grid) {
        return Math.max(collectChocolates(grid, r, c, 0, 0, c - 1), 0);
    }

    private static int collectChocolates(int[][] grid, int r, int c, int i, int j1, int j2) {
		if(j1 < 0 || j1 >= c || j2 < 0 || j2 >= c) return -100000008;

		if(i == r - 1) {
			return (j1 == j2) ? grid[i][j1] : grid[i][j1] + grid[i][j2] ; 
		}

    	int chocolates = (j1 == j2) ? grid[i][j2] : grid[i][j1] + grid[i][j2];

       	int maxVal = 0;
        for (int k = -1; k <= 1; k++) {
            for (int l = -1; l <= 1; l++) {
                maxVal = Math.max(maxVal, collectChocolates(grid, r, c, i + 1, j1 + k, j2 + l));
            }
        }
		
		return maxVal + chocolates;
    }
}


// DP
public class Solution {

    public static int maximumChocolates(int r, int c, int[][] grid) {
        int[][][] dp = new int[r][c][c];

        for(int j1 = 0; j1 < c; j1++){
            for(int j2 = 0; j2 < c; j2++){
                dp[r - 1][j1][j2] = grid[r - 1][j1] + ((j1 != j2) ? grid[r - 1][j2] : 0);
            }
        }

        for(int i = r - 2; i >= 0; i--){
            for(int j1 = 0; j1 < c; j1++){
                for(int j2 = 0; j2 < c; j2++){
                    int maxVal = Integer.MIN_VALUE;  
                    for (int k = -1; k <= 1; k++) {
                        for (int l = -1; l <= 1; l++) {
                           int chocolates = (j1 == j2) ? grid[i][j2] : grid[i][j1] + grid[i][j2];
                           if ((j1 + k < 0 || j1 + k >= c) || (j2 + l < 0 || j2 + l >= c))
                                chocolates += (int) Math.pow(-10, 9);
                            else
                                chocolates += dp[i + 1][j1 + k][j2 + l];

                            maxVal = Math.max(maxVal, chocolates);
                        }
                    }
                    dp[i][j1][j2] = maxVal;
                }
            }
        }

        return dp[0][0][c - 1]; 
    }
}


