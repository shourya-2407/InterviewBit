// Recursive
class Solution{
    static int knapSack(int n, int W, int val[], int wt[])
    {
        // code here
        if(n == 0 || W == 0){
            return 0;
        }
        
        if(wt[n - 1] <= W){
            return Math.max(val[n - 1] + knapSack(n, W - wt[n - 1], val, wt), 
                            knapSack(n - 1, W, val, wt));
        } else{
            return knapSack(n - 1, W, val, wt);
        }
    }
}

// Memoisation
class Solution{
    static int knapSack(int n, int W, int val[], int wt[])
    {
        // code here
        int[][] memo = new int[n + 1][W + 1];
        for(int i = 0; i < n + 1; i++){
            Arrays.fill(memo[i], -1);
        }
        
        return solveKnapSack(n, W, val, wt, memo);
    }
    
    static int solveKnapSack(int n, int W, int[] val, int[] wt, int[][] memo){
        
        if(n == 0 || W == 0){
            return 0;
        }
        
        if(memo[n][W] != -1) return memo[n][W];
        
        if(wt[n - 1] <= W){
            memo[n][W] = Math.max(val[n - 1] + solveKnapSack(n, W - wt[n - 1], val, wt, memo), 
                            solveKnapSack(n - 1, W, val, wt, memo));
        } else{
            memo[n][W] = solveKnapSack(n - 1, W, val, wt, memo);
        }
        
        return memo[n][W];
    }
} 
