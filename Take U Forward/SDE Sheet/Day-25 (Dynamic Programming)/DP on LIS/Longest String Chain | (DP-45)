class Solution {
    public int longestStrChain(String[] words) {
        int n = words.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        Arrays.sort(words, Comparator.comparingInt(String::length));

        int maxVal = 1;
        for(int i = 1; i < n; i++){
            for(int j = 0; j < i; j++){
                if(compare(words[i],words[j]) && 1 + dp[j] > dp[i]){
                    dp[i] = 1 + dp[j];
                }
            }
            maxVal = Math.max(maxVal, dp[i]);
        }

        return maxVal;
    }

    public boolean compare(String s1, String s2){
        if(s2.length() + 1 != s1.length()) return false;
        int i = 0, j = 0;

        while(i < s1.length()){
            if(j < s2.length() && s1.charAt(i) == s2.charAt(j)){
                i++;
                j++;
            } else{
                i++;
            }
        }
        return (i == s1.length() && j == s2.length());
    }

}
