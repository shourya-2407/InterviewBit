// optimisation using 1 D array

class Solution{
    public ArrayList<Integer> longestIncreasingSubsequence(int n, int nums[]){
        // Code hereclass Solution {
        int[] dp = new int[n];
        int[] hash = new int[n];
        int lastIndex = -1;
        int maxVal = Integer.MIN_VALUE;
        
        for(int i = 0; i < n; i++){
            dp[i] = 1;
            hash[i] = i;
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i] && 1 + dp[j] > dp[i]){
                    hash[i] = j;
                    dp[i] = 1 + dp[j];
                }
            }
            if(dp[i] > maxVal){
                lastIndex = i;
                maxVal = dp[i];
            }
        }
        
        
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(nums[lastIndex]);
        
        while(hash[lastIndex] != lastIndex){
            lastIndex = hash[lastIndex];
            ans.add(nums[lastIndex]);
        }
 
        reverseArrayList(ans);
        return ans;
    }
    
    public static void reverseArrayList(ArrayList<Integer> list) {
        int left = 0;
        int right = list.size() - 1;

        while (left < right) {
            // Swap elements at left and right indices
            int temp = list.get(left);
            list.set(left, list.get(right));
            list.set(right, temp);

            // Move pointers towards the center
            left++;
            right--;
        }
    }
}
