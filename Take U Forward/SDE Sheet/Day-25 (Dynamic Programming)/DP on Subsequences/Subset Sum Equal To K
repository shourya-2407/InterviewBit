// Recursion
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        if(n == 0){
            if(k == 0) return true;
            return false;
        }
        if(arr[n - 1] <= k){
            return subsetSumToK(n - 1, k - arr[n - 1], arr) || subsetSumToK(n - 1, k, arr);
        }
        return subsetSumToK(n - 1, k, arr);
    }
}

// DP
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        boolean[][] dp = new boolean[n + 1][k + 1];
        
        for(int j = 0; j <= k; j++){
            dp[0][j] = false;
        }
        for(int i = 0; i <= n; i++){
            dp[i][0] = true;
        }

        for(int i = 1; i < n + 1; i++){
            for(int j = 0; j < k + 1; j++){
                if(arr[i - 1] <= j){
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
                } else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][k];

    }
}
