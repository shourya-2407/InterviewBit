//Recursion
class Solution {
    public int perfectSum(int arr[], int n, int sum) {
        return subsetSum(arr, n, sum);
    } 
    
    private int subsetSum(int arr[], int n, int sum) {
        if (n == 0) {
            if (sum == 0) {
                return 1;
            }
            return 0;
        }
        
        int count = subsetSum(arr, n - 1, sum) % 1000000007;
        if (arr[n - 1] <= sum) {
            count += subsetSum(arr, n - 1, sum - arr[n - 1]) % 1000000007;
        }
        
        return count % 1000000007;
    }
}

// Recursion with memoisation
class Solution {
    public int perfectSum(int arr[], int n, int sum) {
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], -1);
        }
        
        return subsetSum(arr, n, sum, dp);
    } 
    
    private int subsetSum(int arr[], int n, int sum, int[][] dp) {
        if (n == 0) {
            if (sum == 0) {
                return 1;
            }
            return 0;
        }
        
        if (dp[n][sum] != -1) return dp[n][sum];
        
        
        int count = subsetSum(arr, n - 1, sum, dp) % 1000000007;
        if (arr[n - 1] <= sum) {
            count += subsetSum(arr, n - 1, sum - arr[n - 1], dp) % 1000000007;
        }
        
        return dp[n][sum] = count % 1000000007;
    }
}

// DP
class Solution {
    public int perfectSum(int arr[], int n, int sum) {
        int[][] dp = new int[n + 1][sum + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], -1);
        }
        
        for(int j = 0; j < sum + 1; j++){
            dp[0][j] = 0;
        }
        dp[0][0] = 1;

        for(int i = 1; i < n + 1; i++){
            for(int j = 0; j < sum + 1; j++){
                dp[i][j] = dp[i - 1][j] % 1000000007; 
                if(arr[i - 1] <= j){
                    dp[i][j] += dp[i - 1][j - arr[i - 1]] % 1000000007; 
                }
            }
        }
        return dp[n][sum] % 1000000007;
    } 
}
