//using subset sum - optimised
public class Solution {
    public static int minSubsetSumDifference(int []arr, int n) {
        // Write your code here.
        int total = 0;
        for(int ele : arr){
            total += ele;
        }

        boolean[][] dp = subsetSumToK(n, total, arr);
        
        int minVal = Integer.MAX_VALUE;
        for(int i = 0; i < total + 1; i++){
            if(dp[n][i]){
                int diff = Math.abs(i - (total - i));
                minVal = Math.min(minVal, diff);
            }
        }

        return minVal;
    }

    public static boolean[][] subsetSumToK(int n, int k, int arr[]){
        boolean[][] dp = new boolean[n + 1][k + 1];
        
        for(int j = 0; j <= k; j++){
            dp[0][j] = false;
        }
        for(int i = 0; i <= n; i++){
            dp[i][0] = true;
        }

        for(int i = 1; i < n + 1; i++){
            for(int j = 0; j < k + 1; j++){
                if(arr[i - 1] <= j){
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
                } else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp;
    }
}

// Using subset sum - less optimised
public class Solution {
    public static int minSubsetSumDifference(int []arr, int n) {
        // Write your code here.
        int total = 0;
        for(int ele : arr){
            total += ele;
        }

        int s1 = total / 2;
        for(; s1 >= 0; s1--){
            if(subsetSumToK(n, s1, arr)){
                // System.out.println(s1);
                break;
            }
        }

        return total - 2*s1;
    }

    public static boolean subsetSumToK(int n, int k, int arr[]){
        boolean[][] dp = new boolean[n + 1][k + 1];
        
        for(int j = 0; j <= k; j++){
            dp[0][j] = false;
        }
        for(int i = 0; i <= n; i++){
            dp[i][0] = true;
        }

        for(int i = 1; i < n + 1; i++){
            for(int j = 0; j < k + 1; j++){
                if(arr[i - 1] <= j){
                    dp[i][j] = dp[i - 1][j - arr[i - 1]] || dp[i - 1][j];
                } else{
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][k];
    }
}
