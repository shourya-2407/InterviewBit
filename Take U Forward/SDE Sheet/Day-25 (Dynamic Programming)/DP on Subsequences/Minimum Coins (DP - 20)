// Logic - Focus on base condition otherwise it is variation of unbounded knapsack
// DP

public class Solution {
    public static int minimumElements(int num[], int x) {
        int n = num.length;
        int[][] dp = new int[n + 1][x + 1];

        for (int i = 0; i <= x; i++) {
            if (i % num[0] == 0)
                dp[0][i] = i / num[0];
            else
                dp[0][i] = (int) Math.pow(10, 9);
        }
        
        for(int i = 1; i < n + 1; i++){
            for(int j = 0; j < x + 1; j++){
                if (num[i - 1] <= j) {
                    dp[i][j] = Math.min(1 + dp[i][j - num[i - 1]],
                                   dp[i - 1][j]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][x] >= (int) Math.pow(10, 9) ? - 1 : dp[n][x];
    }
}
