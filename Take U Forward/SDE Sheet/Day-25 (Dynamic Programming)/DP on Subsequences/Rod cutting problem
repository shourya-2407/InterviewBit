// Rod Cutting - variation of unbounded knapsack
// wt array -> is the length of rod itself
// length of array n -> length of rod
// value array -> price array

public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.
		return knapSack(price, n, n);
	}

	static int knapSack(int val[], int n, int W)
    {
        // code here
        int[][] dp = new int[n + 1][W + 1];

        for(int i = 0; i < n + 1; i++){
            for(int j = 0; j < W + 1; j++){
                if(i == 0 || j == 0)
                    dp[i][j] = 0;
            }
        }
        
        for(int i = 1; i < n + 1; i++){
            for(int j = 1; j < W + 1; j++){
                if (i <= j) {
                    dp[i][j] = Math.max(val[i - 1] + dp[i][j - i],
                                   dp[i - 1][j]);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][W];
    }
}
