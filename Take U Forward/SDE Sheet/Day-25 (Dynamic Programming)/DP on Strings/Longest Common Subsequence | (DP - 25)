// Recursion
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        return lcs(text1, text2, text1.length() - 1, text2.length() - 1);
    }

    private int lcs(String s1, String s2, int i1, int i2){
        if(i1 < 0 || i2 < 0) return 0;

        if(s1.charAt(i1) == s2.charAt(i2)){
            return 1 + lcs(s1, s2, i1 - 1, i2 - 1);
        } 
        return Math.max(lcs(s1, s2, i1 - 1, i2), lcs(s1, s2, i1, i2 - 1));
    }
}

// DP
class Solution {
    public int longestCommonSubsequence(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();

        int dp[][] = new int[n + 1][m + 1];

        for(int i = 0; i < n + 1; i++){
            for(int j = 0; j < m + 1; j++){
                if(i == 0 || j == 0) dp[i][j] = 0;
            }
        }

        for (int ind1 = 1; ind1 <= n; ind1++) {
            for (int ind2 = 1; ind2 <= m; ind2++) {
                if (s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1))
                    dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
                else
                    dp[ind1][ind2] = Math.max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);
            }
        }

        return dp[n][m];

    }
}
