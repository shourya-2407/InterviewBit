// Recursion
public class Solution {
    public static String findLCS(int n, int m, String s1, String s2){
        if(n  < 1 || m < 1) return "";

        if(s1.charAt(n - 1) == s2.charAt(m - 1)){
            return s1.charAt(n - 1)  + findLCS(n - 1, m - 1, s1, s2);
        } 
        String sub1 = findLCS(n - 1, m, s1, s2);
        String sub2 = findLCS(n, m - 1, s1, s2);
        
        return sub1.length() > sub2.length() ? sub1 : sub2; 

    }
}

// DP
public class Solution {
    public static String findLCS(int n, int m, String s1, String s2) {
        String[][] dp = new String[n + 1][m + 1];
        
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = "";
            }
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + s1.charAt(i - 1);
                } else {
                    dp[i][j] = dp[i - 1][j].length() > dp[i][j - 1].length() ? dp[i - 1][j] : dp[i][j - 1];
                }
            }
        }

        return dp[n][m];
    }
}
