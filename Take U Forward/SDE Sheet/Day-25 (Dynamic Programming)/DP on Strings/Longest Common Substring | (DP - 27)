// DP - a simple change from that of longest subsequence
// just if a match f(i,j) = 1 + f(i - 1, j - 1)
// if not simply do f(i, j) = 0;

public class Solution {
    public static int lcs(String s1, String s2){
        int n = s1.length();
        int m = s2.length();

        int dp[][] = new int[n + 1][m + 1];

        for(int i = 0; i < n + 1; i++){
            for(int j = 0; j < m + 1; j++){
                if(i == 0 || j == 0) dp[i][j] = 0;
            }
        }

        int maxVal = Integer.MIN_VALUE;
        for (int ind1 = 1; ind1 <= n; ind1++) {
            for (int ind2 = 1; ind2 <= m; ind2++) {
                if (s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1)){
                    dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
                    maxVal = Math.max(maxVal, dp[ind1][ind2]);
                }
                else
                    dp[ind1][ind2] = 0;
            }
        }

        return maxVal;

    }
}
