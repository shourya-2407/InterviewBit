// Recursion
class Solution {
    public int maxProfit(int[] prices) {
        return findWaysToBuyOrSell(prices, 0, true, 2, prices.length);
    }

    public int findWaysToBuyOrSell(int[] prices, int ind, boolean buy, int cap, int n){
        if(ind == n) return 0;
        if(cap == 0) return 0; 
        int profit = Integer.MIN_VALUE;
        if(buy){
            profit = Math.max(-1*prices[ind] + findWaysToBuyOrSell(prices, ind + 1, !buy, cap, n), findWaysToBuyOrSell(prices, ind + 1, buy, cap, n));
        } else{
            profit = Math.max(prices[ind] + findWaysToBuyOrSell(prices, ind + 1, !buy, cap - 1, n), findWaysToBuyOrSell(prices, ind + 1, buy, cap, n));
        }
        return profit;
    }
}

// DP

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][][] dp = new int[n + 1][2][3];

        for(int i = n - 1; i >= 0; i--){
            for(int j = 0; j < 2; j++){
                for(int k = 1; k <= 2; k++){
                    if(j == 0){
                        dp[i][j][k] = Math.max(-1*prices[i] + dp[i + 1][1][k], dp[i + 1][0][k]);
                    } else{
                        dp[i][j][k] = Math.max(prices[i] + dp[i + 1][0][k - 1], dp[i + 1][1][k]);
                    }
                }
            }
        }

        return dp[0][0][2];
    }
}
