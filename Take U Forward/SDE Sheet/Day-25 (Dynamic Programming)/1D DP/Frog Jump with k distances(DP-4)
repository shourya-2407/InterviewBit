// Recursion
public class Solution {
    public static int minimizeCost(int n, int k, int []height){
        // Write your code here.
        return findMinCost(n - 1, k, height);
    }

    public static int findMinCost(int n, int k, int[] height){
        if(n == 0){
            return 0;
        }
        int minCost = Integer.MAX_VALUE;
        for(int j = 1; j <= k; j++){
            int currcost = Integer.MAX_VALUE;
            if(n - j >= 0){
                currcost = Math.abs(height[n - j] - height[n]) + findMinCost(n - j, k, height);
            }
            minCost = Math.min(minCost, currcost);
        }
        return minCost;
    }
}

// DP
public class Solution {
    public static int minimizeCost(int n, int k, int []height){
        // Write your code here.
        int[] dp = new int[n]; // Initialize a memoization array to store calculated results

        dp[0] = 0;

        // Loop through the array to fill in the dp array
        for (int i = 1; i < n; i++) {
            int mmSteps = Integer.MAX_VALUE;

            // Loop to try all possible jumps from '1' to 'k'
            for (int j = 1; j <= k; j++) {
                if (i - j >= 0) {
                    int jump = dp[i - j] + Math.abs(height[i] - height[i - j]);
                    mmSteps = Math.min(jump, mmSteps);
                }
            }
            dp[i] = mmSteps;
        }
        return dp[n - 1];
    }
}
