// Recursion
public class Solution {

	public static int mcm(int[] p){
		int n = p.length;
		return f(p, 1, n - 1);
	}
	
	public static int f(int[] p, int i, int j){
		if(i == j) return 0;
		
		int min = Integer.MAX_VALUE;
		for(int k = i; k < j; k++){
			min = Math.min(min, p[i - 1]*p[k]*p[j] + f(p, i, k) + f(p, k + 1, j));
		}
		return min;
	}
}

// DP
public class Solution {
	public static int mcm(int[] arr){
		int N = arr.length;
		int[][] dp = new int[N][N];

		for (int len = 2; len < N; len++) {
			for (int i = 1; i < N - len + 1; i++) {
				int j = i + len - 1;
				dp[i][j] = Integer.MAX_VALUE;

				for (int k = i; k < j; k++) {
					int cost = dp[i][k] + dp[k + 1][j] + arr[i - 1] * arr[k] * arr[j];
					dp[i][j] = Math.min(dp[i][j], cost);
				}
			}
		}

		return dp[1][N - 1];
	}
}
