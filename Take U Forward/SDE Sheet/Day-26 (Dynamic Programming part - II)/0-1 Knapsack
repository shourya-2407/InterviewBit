//Recursive Solution
class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
        if(n == 0 || W == 0) return 0;
        
        if(wt[n - 1] <= W){
           return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), 
           knapSack(W, wt, val, n - 1));
        } else{
            return knapSack(W, wt, val, n - 1);
        }
    } 
}

// Recursion with memoization
class Solution {

    static int knapSack(int W, int wt[], int val[], int n) {
        int[][] memo = new int[n + 1][W + 1];

        for (int i = 0; i <= n; i++) {
            Arrays.fill(memo[i], -1);
        }
        
        return knapSackMemo(W, wt, val, n, memo);
    } 
    
    static int knapSackMemo(int W, int wt[], int val[], int n, int[][] memo) {
        if (n == 0 || W == 0) return 0;

        if (memo[n][W] != -1) return memo[n][W];
 
        if (wt[n - 1] <= W) {
            memo[n][W] = Math.max(val[n - 1] + knapSackMemo(W - wt[n - 1], wt, val, n - 1, memo), 
                                   knapSackMemo(W, wt, val, n - 1, memo));
        } else {
            memo[n][W] = knapSackMemo(W, wt, val, n - 1, memo);
        }
        return memo[n][W];
    } 
}

//Dynamic Programming
