class Pair /*implements Comparable<Pair>*/{
    int distance;
    int node;
    Pair(int d,int n){
        distance=d;
        node=n;
    }
}
    
class Solution
{
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        int dist_arr[]=new int[V];
        Arrays.fill(dist_arr, Integer.MAX_VALUE);
        
        PriorityQueue<Pair> pq=new PriorityQueue<>((x, y) -> x.distance - y.distance);
        pq.offer(new Pair(0,S));
        dist_arr[S]=0;
        
        while(!pq.isEmpty()){
            int dis=pq.peek().distance;
            int node=pq.peek().node;
            pq.remove();
            
            for(int i = 0; i < adj.get(node).size(); i++){
                int edgeWt = adj.get(node).get(i).get(1);
                int adjNode = adj.get(node).get(i).get(0);
                
                if(dis + edgeWt < dist_arr[adjNode]){
                    dist_arr[adjNode] = dis + edgeWt;
                    pq.add(new Pair(dist_arr[adjNode], adjNode));
                }
            }
        }
        
        return dist_arr;
    }
}
