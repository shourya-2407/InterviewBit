class Solution
{
    private void leftBoundary(Node root,ArrayList<Integer> ans){
        if(root==null) return;
        if(root.left==null && root.right==null) return;
        
        ans.add(root.data);
        if(root.left!=null){
            leftBoundary(root.left,ans);
        }
        else{
            leftBoundary(root.right,ans);
        }
    }
    
    private void leaves(Node root,ArrayList<Integer> ans){
        if(root==null)  return;
        
        if(root.left==null && root.right==null){
            ans.add(root.data);
            return;
        }
        leaves(root.left,ans);
        leaves(root.right,ans);
    }
    
    private void rightBoundary(Node root,ArrayList<Integer> ans){
        if(root==null) return;
        if(root.left==null && root.right==null) return;
        
        if(root.right != null){
            rightBoundary(root.right,ans);
        }
        else{
            rightBoundary(root.left,ans);
        }
        ans.add(root.data);
    }
    
	ArrayList <Integer> boundary(Node root)
	{
        ArrayList<Integer> ans = new ArrayList<>();
        if(root==null) return ans;
        
        ans.add(root.data);
        
        if(root.left==null && root.right==null) return ans;
        
        leftBoundary(root.left,ans);
        leaves(root,ans);
        rightBoundary(root.right,ans);
        return ans;
	}
}
