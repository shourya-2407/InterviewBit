/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class PNodes {
    TreeNode p; 
    TreeNode q;

    PNodes(TreeNode p, TreeNode q){
        this.p = p;
        this.q = q;
    }
}

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p == null && q == null) return true;
        if(p == null || q == null) return false;
        if(p.val != q.val) return false;

        Queue<PNodes> queue = new LinkedList<>();
        queue.add(new PNodes(p, q));

        while(!queue.isEmpty()){
            PNodes pair = queue.remove();
            TreeNode tmpP = pair.p;
            TreeNode tmpQ = pair.q;
            if(tmpP == null && tmpQ == null){
                continue;
            }

            if((tmpP.left != null && tmpQ.left != null) && (tmpP.left.val == tmpQ.left.val)) {
                queue.add(new PNodes(tmpP.left, tmpQ.left));
            }else if(tmpP.left == null && tmpQ.left == null){
                queue.add(new PNodes(tmpP.left, tmpQ.left));
            }else if(tmpP.left == null || tmpQ.left == null){
                return false;
            }else if(tmpP.left.val != tmpQ.left.val){
                return false;
            }
            
            if((tmpP.right != null && tmpQ.right != null) && (tmpP.right.val == tmpQ.right.val)){
                 queue.add(new PNodes(tmpP.right, tmpQ.right));
            }else if(tmpP.right == null && tmpQ.right == null){
                queue.add(new PNodes(tmpP.right, tmpQ.right));
            }else if(tmpP.right == null || tmpQ.right == null){
                return false;
            }else if(tmpP.right.val != tmpQ.right.val){
                return false;
            }
        }
        return true;
    }
}
